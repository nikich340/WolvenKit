using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using WolvenKit.CR2W;
using WolvenKit.CR2W.Types;
using Newtonsoft.Json;
using IrrlichtLime;
using IrrlichtLime.Core;
using IrrlichtLime.Scene;
using WolvenKit.Render.Animation;
using Newtonsoft.Json.Linq;
using System.Windows.Forms;

namespace WolvenKit.Render.Animation
{
    public class ConvertAnimation
    {
        private CR2WFile w2AnimFile;
        public CR2WFile W2AnimFile
        {
            get { return w2AnimFile; }
            set { w2AnimFile = value; }
        }
        /// <summary>
        /// </summary>
        /// <param name="args"></param>
        public ConvertAnimation()
        {
        }

        public static byte[] Combine(byte[] first, byte[] second)
        {
            byte[] ret = new byte[first.Length + second.Length];
            Buffer.BlockCopy(first, 0, ret, 0, first.Length);
            Buffer.BlockCopy(second, 0, ret, first.Length, second.Length);
            return ret;
        }

        public CVariable animVar(string type, string name, CR2WFile file)
        {
            CVariable newvar = CR2WTypeManager.Get().GetByName(type, name, file, false);
            if (newvar == null)
                throw new Exception("Nope");
            newvar.Name = name;
            newvar.Type = type;
            return newvar;
        }

        public int appendAnimEventsToW2Anims(CR2WFile animsFile, CR2WFile animsFile2)
        {
            /*byte[] data;
            //data = File.ReadAllBytes(@"D:\w3.modding\animation\template.w2anims"); //need a better way to generate a working blank CR2WFile
            data = new byte[] { 0x43, 0x52, 0x32, 0x57, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x41, 0x7E, 0xB6, 0xDD, 0x97, 0x04, 0x48, 0xC9, 0x12, 0x00, 0x79, 0x1E, 0x00, 0x00, 0x79, 0x1E, 0x00, 0x00, 0x2B, 0xD2, 0xC3, 0x65, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x79, 0x10, 0x00, 0x00, 0xE6, 0xC9, 0xB7, 0x4F, 0x19, 0x11, 0x00, 0x00, 0xBE, 0x00, 0x00, 0x00, 0x97, 0xD3, 0x3A, 0xBD, 0x09, 0x17, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xFB, 0xC3, 0xCA, 0x6D, 0x19, 0x17, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x4B, 0xBB, 0xEC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x17, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0xAF, 0x21, 0x75, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x61, 0x6C, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x53, 0x65, 0x74, 0x00, 0x61, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x32, 0x2C, 0x30, 0x2C, 0x70, 0x74, 0x72, 0x3A, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x61, 0x6C, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x53, 0x65, 0x74, 0x45, 0x6E, 0x74, 0x72, 0x79, 0x00, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x61, 0x6C, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x53, 0x65, 0x74, 0x45, 0x6E, 0x74, 0x72, 0x79, 0x00, 0x61, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x70, 0x74, 0x72, 0x3A, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x61, 0x6C, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x61, 0x6C, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x6E, 0x61, 0x6D, 0x65, 0x00, 0x43, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x63, 0x5F, 0x6D, 0x61, 0x67, 0x65, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x61, 0x6E, 0x69, 0x6D, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x00, 0x70, 0x74, 0x72, 0x3A, 0x49, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x00, 0x43, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x00, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x00, 0x55, 0x69, 0x6E, 0x74, 0x33, 0x32, 0x00, 0x62, 0x6F, 0x6E, 0x65, 0x73, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x31, 0x32, 0x39, 0x2C, 0x30, 0x2C, 0x53, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6F, 0x6E, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x00, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x53, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x00, 0x64, 0x74, 0x00, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x00, 0x63, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x00, 0x49, 0x6E, 0x74, 0x38, 0x00, 0x6E, 0x75, 0x6D, 0x46, 0x72, 0x61, 0x6D, 0x65, 0x73, 0x00, 0x55, 0x69, 0x6E, 0x74, 0x31, 0x36, 0x00, 0x6F, 0x72, 0x69, 0x65, 0x6E, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x64, 0x61, 0x74, 0x61, 0x41, 0x64, 0x64, 0x72, 0x00, 0x64, 0x61, 0x74, 0x61, 0x41, 0x64, 0x64, 0x72, 0x46, 0x61, 0x6C, 0x6C, 0x62, 0x61, 0x63, 0x6B, 0x00, 0x73, 0x63, 0x61, 0x6C, 0x65, 0x00, 0x66, 0x61, 0x6C, 0x6C, 0x62, 0x61, 0x63, 0x6B, 0x44, 0x61, 0x74, 0x61, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x31, 0x32, 0x39, 0x2C, 0x30, 0x2C, 0x49, 0x6E, 0x74, 0x38, 0x00, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x00, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x00, 0x6F, 0x72, 0x69, 0x65, 0x6E, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x43, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x00, 0x53, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4F, 0x72, 0x69, 0x65, 0x6E, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x43, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x00, 0x41, 0x42, 0x4F, 0x43, 0x4D, 0x5F, 0x50, 0x61, 0x63, 0x6B, 0x49, 0x6E, 0x34, 0x38, 0x62, 0x69, 0x74, 0x73, 0x57, 0x00, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x69, 0x6E, 0x67, 0x4F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x53, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x69, 0x6E, 0x67, 0x4F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x41, 0x42, 0x53, 0x4F, 0x5F, 0x46, 0x75, 0x6C, 0x6C, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x61, 0x62, 0x6C, 0x65, 0x00, 0x68, 0x61, 0x73, 0x52, 0x65, 0x66, 0x49, 0x4B, 0x42, 0x6F, 0x6E, 0x65, 0x73, 0x00, 0x42, 0x6F, 0x6F, 0x6C, 0x00, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6F, 0x6E, 0x64, 0x00, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x63, 0x5F, 0x6D, 0x61, 0x67, 0x65, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x53, 0x6F, 0x75, 0x6E, 0x64, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5F, 0x63, 0x6C, 0x6F, 0x74, 0x68, 0x65, 0x73, 0x00, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6D, 0x65, 0x00, 0x61, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x41, 0x6E, 0x73, 0x69, 0x00, 0x6D, 0x61, 0x78, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x00, 0x62, 0x6F, 0x6E, 0x65, 0x00, 0x74, 0x6F, 0x72, 0x73, 0x6F, 0x00, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x54, 0x6F, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x32, 0x2C, 0x30, 0x2C, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x41, 0x6E, 0x73, 0x69, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x46, 0x6F, 0x6F, 0x74, 0x73, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5F, 0x66, 0x6F, 0x6F, 0x74, 0x73, 0x74, 0x65, 0x70, 0x73, 0x00, 0x72, 0x5F, 0x66, 0x6F, 0x6F, 0x74, 0x00, 0x6C, 0x5F, 0x66, 0x6F, 0x6F, 0x74, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x7B, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5F, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x20, 0x2D, 0x20, 0x77, 0x32, 0x61, 0x6E, 0x69, 0x6D, 0x65, 0x76, 0x7D, 0x2E, 0x66, 0x78, 0x00, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x72, 0x68, 0x00, 0x63, 0x5F, 0x6D, 0x61, 0x67, 0x65, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x45, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x45, 0x41, 0x5F, 0x53, 0x74, 0x6F, 0x70, 0x00, 0x63, 0x5F, 0x6D, 0x61, 0x67, 0x65, 0x5F, 0x74, 0x65, 0x6C, 0x65, 0x70, 0x6F, 0x72, 0x74, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x73, 0x65, 0x78, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x41, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x20, 0x62, 0x6F, 0x77, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x66, 0x72, 0x6F, 0x6E, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x5F, 0x31, 0x00, 0x6D, 0x6F, 0x74, 0x69, 0x6F, 0x6E, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x70, 0x74, 0x72, 0x3A, 0x49, 0x4D, 0x6F, 0x74, 0x69, 0x6F, 0x6E, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x43, 0x4C, 0x69, 0x6E, 0x65, 0x4D, 0x6F, 0x74, 0x69, 0x6F, 0x6E, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x32, 0x00, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x73, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x32, 0x2C, 0x30, 0x2C, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x00, 0x64, 0x65, 0x6C, 0x74, 0x61, 0x54, 0x69, 0x6D, 0x65, 0x73, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x32, 0x2C, 0x30, 0x2C, 0x55, 0x69, 0x6E, 0x74, 0x38, 0x00, 0x66, 0x6C, 0x61, 0x67, 0x73, 0x00, 0x55, 0x69, 0x6E, 0x74, 0x38, 0x00, 0x41, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x20, 0x62, 0x6F, 0x77, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x66, 0x72, 0x6F, 0x6E, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x5F, 0x32, 0x00, 0x42, 0x6C, 0x61, 0x6E, 0x6B, 0x61, 0x20, 0x69, 0x6E, 0x6A, 0x75, 0x72, 0x65, 0x64, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x20, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x29, 0x20, 0x74, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x69, 0x72, 0x2C, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x53, 0x6F, 0x72, 0x63, 0x65, 0x72, 0x65, 0x73, 0x73, 0x20, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x20, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x20, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x53, 0x6F, 0x72, 0x63, 0x65, 0x72, 0x65, 0x73, 0x73, 0x20, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x20, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x20, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x53, 0x6F, 0x72, 0x63, 0x65, 0x72, 0x65, 0x73, 0x73, 0x20, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x20, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x20, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x63, 0x6F, 0x6E, 0x63, 0x69, 0x6F, 0x75, 0x73, 0x2C, 0x20, 0x64, 0x69, 0x7A, 0x7A, 0x79, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x63, 0x6F, 0x6E, 0x63, 0x69, 0x6F, 0x75, 0x73, 0x2C, 0x20, 0x64, 0x69, 0x7A, 0x7A, 0x79, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x63, 0x6F, 0x6E, 0x63, 0x69, 0x6F, 0x75, 0x73, 0x2C, 0x20, 0x64, 0x69, 0x7A, 0x7A, 0x79, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x74, 0x20, 0x66, 0x75, 0x6E, 0x65, 0x72, 0x61, 0x6C, 0x20, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6C, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x74, 0x20, 0x66, 0x75, 0x6E, 0x65, 0x72, 0x61, 0x6C, 0x20, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6C, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x74, 0x20, 0x66, 0x75, 0x6E, 0x65, 0x72, 0x61, 0x6C, 0x20, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6C, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x68, 0x79, 0x70, 0x6E, 0x6F, 0x74, 0x69, 0x7A, 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6F, 0x6E, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x68, 0x79, 0x70, 0x6E, 0x6F, 0x74, 0x69, 0x7A, 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6F, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x68, 0x79, 0x70, 0x6E, 0x6F, 0x74, 0x69, 0x7A, 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6F, 0x6E, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x75, 0x6E, 0x63, 0x6F, 0x6E, 0x63, 0x69, 0x6F, 0x75, 0x73, 0x20, 0x6F, 0x6E, 0x20, 0x66, 0x6C, 0x6F, 0x6F, 0x72, 0x00, 0x57, 0x6F, 0x6D, 0x65, 0x6E, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x20, 0x73, 0x61, 0x75, 0x6E, 0x61, 0x5F, 0x31, 0x00, 0x57, 0x6F, 0x6D, 0x65, 0x6E, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x20, 0x73, 0x61, 0x75, 0x6E, 0x61, 0x5F, 0x32, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x31, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x31, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x31, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x32, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5F, 0x63, 0x6C, 0x61, 0x70, 0x00, 0x6C, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x32, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x32, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x33, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x33, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x33, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x62, 0x6C, 0x69, 0x6E, 0x64, 0x5F, 0x66, 0x69, 0x6C, 0x69, 0x70, 0x70, 0x61, 0x5F, 0x63, 0x6F, 0x6D, 0x62, 0x61, 0x74, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x62, 0x6C, 0x69, 0x6E, 0x64, 0x5F, 0x66, 0x69, 0x6C, 0x69, 0x70, 0x70, 0x61, 0x5F, 0x63, 0x6F, 0x6D, 0x62, 0x61, 0x74, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x62, 0x6C, 0x69, 0x6E, 0x64, 0x5F, 0x66, 0x69, 0x6C, 0x69, 0x70, 0x70, 0x61, 0x5F, 0x63, 0x6F, 0x6D, 0x62, 0x61, 0x74, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x71, 0x34, 0x30, 0x33, 0x5F, 0x79, 0x65, 0x6E, 0x6E, 0x65, 0x66, 0x65, 0x72, 0x5F, 0x63, 0x68, 0x61, 0x6E, 0x74, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x77, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x63, 0x75, 0x66, 0x66, 0x65, 0x64, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x77, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x63, 0x75, 0x66, 0x66, 0x65, 0x64, 0x5F, 0x6C, 0x65, 0x66, 0x74, 0x5F, 0x74, 0x75, 0x72, 0x6E, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x77, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x63, 0x75, 0x66, 0x66, 0x65, 0x64, 0x5F, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5F, 0x74, 0x75, 0x72, 0x6E, 0x00, 0x71, 0x32, 0x30, 0x33, 0x5F, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6B, 0x65, 0x64, 0x5F, 0x62, 0x79, 0x5F, 0x77, 0x69, 0x6C, 0x64, 0x20, 0x68, 0x75, 0x6E, 0x74, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x49, 0x74, 0x65, 0x6D, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x69, 0x74, 0x65, 0x6D, 0x5F, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6F, 0x72, 0x79, 0x00, 0x73, 0x74, 0x65, 0x65, 0x6C, 0x73, 0x77, 0x6F, 0x72, 0x64, 0x00, 0x69, 0x74, 0x65, 0x6D, 0x4E, 0x61, 0x6D, 0x65, 0x5F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C, 0x00, 0x71, 0x32, 0x30, 0x33, 0x20, 0x47, 0x68, 0x6F, 0x73, 0x74, 0x20, 0x48, 0x75, 0x6D, 0x61, 0x6E, 0x20, 0x53, 0x77, 0x6F, 0x72, 0x64, 0x00, 0x45, 0x49, 0x74, 0x65, 0x6D, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x49, 0x41, 0x5F, 0x4D, 0x6F, 0x75, 0x6E, 0x74, 0x54, 0x6F, 0x52, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x6E, 0x64, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x4D, 0x6F, 0x6E, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6C, 0x75, 0x65, 0x41, 0x6E, 0x69, 0x6D, 0x53, 0x74, 0x61, 0x72, 0x74, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x49, 0x74, 0x65, 0x6D, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x67, 0x68, 0x6F, 0x73, 0x74, 0x00, 0x45, 0x49, 0x74, 0x65, 0x6D, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x49, 0x45, 0x41, 0x5F, 0x53, 0x74, 0x6F, 0x70, 0x00, 0x4D, 0x6F, 0x6E, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6C, 0x75, 0x65, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x6E, 0x64, 0x00, 0x71, 0x32, 0x30, 0x33, 0x5F, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x73, 0x6F, 0x75, 0x72, 0x61, 0x6E, 0x64, 0x65, 0x64, 0x00, 0x71, 0x32, 0x30, 0x31, 0x5F, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x72, 0x75, 0x6E, 0x6B, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x31, 0x00, 0x71, 0x32, 0x30, 0x31, 0x5F, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x72, 0x75, 0x6E, 0x6B, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x32, 0x00, 0x71, 0x32, 0x30, 0x31, 0x5F, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x72, 0x75, 0x6E, 0x6B, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x33, 0x00, 0x71, 0x32, 0x30, 0x31, 0x5F, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x72, 0x75, 0x6E, 0x6B, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x71, 0x32, 0x30, 0x31, 0x5F, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x72, 0x75, 0x6E, 0x6B, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x77, 0x6F, 0x72, 0x6B, 0x5F, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x65, 0x69, 0x6E, 0x67, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x77, 0x6F, 0x72, 0x6B, 0x5F, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x65, 0x69, 0x6E, 0x67, 0x5F, 0x30, 0x32, 0x00, 0x71, 0x32, 0x30, 0x33, 0x5F, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x00, 0x6D, 0x61, 0x72, 0x67, 0x65, 0x72, 0x69, 0x74, 0x61, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x31, 0x00, 0x6D, 0x61, 0x72, 0x67, 0x65, 0x72, 0x69, 0x74, 0x61, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x65, 0x6E, 0x64, 0x00, 0x6D, 0x61, 0x72, 0x67, 0x65, 0x72, 0x69, 0x74, 0x61, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x74, 0x72, 0x69, 0x73, 0x73, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x65, 0x6E, 0x64, 0x00, 0x74, 0x72, 0x69, 0x73, 0x73, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x31, 0x00, 0x74, 0x72, 0x69, 0x73, 0x73, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x79, 0x65, 0x6E, 0x6E, 0x65, 0x66, 0x65, 0x72, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x65, 0x6E, 0x64, 0x00, 0x79, 0x65, 0x6E, 0x6E, 0x65, 0x66, 0x65, 0x72, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x31, 0x00, 0x79, 0x65, 0x6E, 0x6E, 0x65, 0x66, 0x65, 0x72, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5F, 0x6C, 0x6F, 0x77, 0x5F, 0x6C, 0x79, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x6F, 0x77, 0x6E, 0x5F, 0x64, 0x65, 0x76, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5F, 0x69, 0x64, 0x6C, 0x65, 0x00, 0x71, 0x34, 0x30, 0x33, 0x5F, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x74, 0x75, 0x72, 0x6E, 0x5F, 0x77, 0x68, 0x65, 0x65, 0x6C, 0x00, 0x67, 0x65, 0x72, 0x61, 0x6C, 0x74, 0x5F, 0x62, 0x65, 0x69, 0x6E, 0x67, 0x5F, 0x70, 0x75, 0x6C, 0x6C, 0x65, 0x64, 0x5F, 0x65, 0x6E, 0x64, 0x00, 0x67, 0x65, 0x72, 0x61, 0x6C, 0x74, 0x5F, 0x62, 0x65, 0x69, 0x6E, 0x67, 0x5F, 0x70, 0x75, 0x6C, 0x6C, 0x65, 0x64, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x67, 0x65, 0x72, 0x61, 0x6C, 0x74, 0x5F, 0x62, 0x65, 0x69, 0x6E, 0x67, 0x5F, 0x70, 0x75, 0x6C, 0x6C, 0x65, 0x64, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x64, 0x72, 0x69, 0x6E, 0x6B, 0x73, 0x5F, 0x76, 0x6F, 0x64, 0x6B, 0x61, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5F, 0x64, 0x72, 0x69, 0x6E, 0x6B, 0x00, 0x72, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x00, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5F, 0x69, 0x74, 0x65, 0x6D, 0x00, 0x68, 0x65, 0x61, 0x64, 0x00, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x5F, 0x69, 0x74, 0x65, 0x6D, 0x00, 0x73, 0x6F, 0x72, 0x63, 0x65, 0x72, 0x65, 0x73, 0x73, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x73, 0x6F, 0x72, 0x63, 0x65, 0x72, 0x65, 0x73, 0x73, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x73, 0x6F, 0x72, 0x63, 0x65, 0x72, 0x65, 0x73, 0x73, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x71, 0x31, 0x30, 0x33, 0x5F, 0x6D, 0x61, 0x6E, 0x5F, 0x67, 0x65, 0x72, 0x61, 0x6C, 0x74, 0x5F, 0x67, 0x75, 0x73, 0x6C, 0x61, 0x72, 0x5F, 0x62, 0x65, 0x6C, 0x6C, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5F, 0x62, 0x65, 0x6C, 0x6C, 0x00, 0x71, 0x34, 0x30, 0x33, 0x5F, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x6D, 0x65, 0x74, 0x65, 0x6F, 0x72, 0x00, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x74, 0x65, 0x6D, 0x4C, 0x00, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6D, 0x4C, 0x00, 0x48, 0x69, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6D, 0x4C, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x64, 0x72, 0x69, 0x6E, 0x6B, 0x69, 0x6E, 0x67, 0x20, 0x67, 0x72, 0x61, 0x66, 0x65, 0x63, 0x75, 0x6C, 0x6C, 0x79, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x64, 0x72, 0x69, 0x6E, 0x6B, 0x69, 0x6E, 0x67, 0x20, 0x67, 0x72, 0x61, 0x66, 0x65, 0x63, 0x75, 0x6C, 0x6C, 0x79, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x64, 0x72, 0x69, 0x6E, 0x6B, 0x69, 0x6E, 0x67, 0x20, 0x67, 0x72, 0x61, 0x66, 0x65, 0x63, 0x75, 0x6C, 0x6C, 0x79, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x69, 0x64, 0x6C, 0x65, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x63, 0x75, 0x66, 0x66, 0x65, 0x64, 0x00, 0x41, 0x42, 0x4F, 0x43, 0x4D, 0x5F, 0x41, 0x73, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x5F, 0x58, 0x59, 0x5A, 0x53, 0x69, 0x67, 0x6E, 0x65, 0x64, 0x57, 0x49, 0x6E, 0x4C, 0x61, 0x73, 0x74, 0x42, 0x69, 0x74, 0x00, 0x73, 0x71, 0x32, 0x30, 0x32, 0x5F, 0x79, 0x65, 0x6E, 0x6E, 0x65, 0x66, 0x65, 0x72, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x00, 0x65, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x73, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x32, 0x2C, 0x30, 0x2C, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x3A, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x73, 0x46, 0x69, 0x6C, 0x65, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x73, 0x46, 0x69, 0x6C, 0x65, 0x00, 0x73, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x6F, 0x6E, 0x00, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x3A, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x6F, 0x6E, 0x00, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x6F, 0x6E, 0x00, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x69, 0x6E, 0x67, 0x20, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x64, 0x61, 0x6E, 0x63, 0x65, 0x00, 0x41, 0x42, 0x53, 0x4F, 0x5F, 0x4E, 0x6F, 0x6E, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x61, 0x62, 0x6C, 0x65, 0x00, 0x64, 0x61, 0x74, 0x61, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5C, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x5C, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5C, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5C, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5F, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x2E, 0x77, 0x32, 0x61, 0x6E, 0x69, 0x6D, 0x65, 0x76, 0x00, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x5C, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x65, 0x6E, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5C, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x62, 0x61, 0x73, 0x65, 0x5C, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x62, 0x61, 0x73, 0x65, 0x2E, 0x77, 0x32, 0x72, 0x69, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD1, 0x55, 0x2C, 0xC1, 0x17, 0x00, 0x00, 0x00, 0xDE, 0x9C, 0x8C, 0x69, 0x22, 0x00, 0x00, 0x00, 0x6A, 0x5A, 0x04, 0x83, 0x4B, 0x00, 0x00, 0x00, 0xCF, 0x77, 0xEF, 0x80, 0x66, 0x00, 0x00, 0x00, 0x67, 0x3C, 0x16, 0xFE, 0x70, 0x00, 0x00, 0x00, 0x83, 0xBD, 0xF4, 0x9E, 0x87, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x68, 0xB9, 0x9A, 0x00, 0x00, 0x00, 0x12, 0xF1, 0xE5, 0x37, 0x9F, 0x00, 0x00, 0x00, 0xDB, 0x5B, 0x10, 0xF1, 0xA5, 0x00, 0x00, 0x00, 0xF0, 0xF3, 0x70, 0x92, 0xB6, 0x00, 0x00, 0x00, 0xDE, 0x8E, 0x1C, 0x09, 0xC1, 0x00, 0x00, 0x00, 0xE8, 0x95, 0xB7, 0xBA, 0xD6, 0x00, 0x00, 0x00, 0xF4, 0x16, 0xA8, 0x83, 0xF8, 0x00, 0x00, 0x00, 0xB5, 0xD7, 0xF5, 0x7B, 0x00, 0x01, 0x00, 0x00, 0x64, 0x6D, 0x59, 0x16, 0x07, 0x01, 0x00, 0x00, 0x5C, 0xC8, 0x16, 0x46, 0x0D, 0x01, 0x00, 0x00, 0xB2, 0xD2, 0x4A, 0x67, 0x44, 0x01, 0x00, 0x00, 0xBE, 0xD9, 0xD7, 0xEF, 0x4D, 0x01, 0x00, 0x00, 0x3C, 0x8E, 0xD6, 0xB9, 0x73, 0x01, 0x00, 0x00, 0xDF, 0x1C, 0x34, 0x69, 0x76, 0x01, 0x00, 0x00, 0x3F, 0x80, 0xAD, 0x94, 0x7C, 0x01, 0x00, 0x00, 0xAF, 0x56, 0x47, 0x9D, 0x88, 0x01, 0x00, 0x00, 0x36, 0x4A, 0x89, 0xC9, 0x8D, 0x01, 0x00, 0x00, 0x03, 0x0E, 0x91, 0x87, 0x97, 0x01, 0x00, 0x00, 0x56, 0x74, 0x3E, 0x49, 0x9E, 0x01, 0x00, 0x00, 0xF3, 0x27, 0xC7, 0xAD, 0xAA, 0x01, 0x00, 0x00, 0xB6, 0x11, 0x2E, 0x04, 0xB3, 0x01, 0x00, 0x00, 0x10, 0xD5, 0x65, 0x25, 0xC4, 0x01, 0x00, 0x00, 0xE3, 0xC5, 0xE1, 0x04, 0xCA, 0x01, 0x00, 0x00, 0xB9, 0x0D, 0x62, 0x32, 0xD7, 0x01, 0x00, 0x00, 0xEF, 0xF9, 0xAC, 0x2C, 0xE8, 0x01, 0x00, 0x00, 0x4E, 0x35, 0xA2, 0xB7, 0xF5, 0x01, 0x00, 0x00, 0x8C, 0xA0, 0x90, 0x41, 0x08, 0x02, 0x00, 0x00, 0x1C, 0x90, 0xF5, 0xA5, 0x25, 0x02, 0x00, 0x00, 0xE1, 0x92, 0x9C, 0x55, 0x52, 0x02, 0x00, 0x00, 0x7D, 0xBB, 0x77, 0xA4, 0x66, 0x02, 0x00, 0x00, 0x02, 0x2B, 0x20, 0x0D, 0x76, 0x02, 0x00, 0x00, 0x09, 0xF2, 0x6D, 0xCA, 0x96, 0x02, 0x00, 0x00, 0x3D, 0x15, 0x90, 0x71, 0xAB, 0x02, 0x00, 0x00, 0xA9, 0x33, 0x93, 0x11, 0xB9, 0x02, 0x00, 0x00, 0x67, 0xD6, 0xE1, 0x10, 0xBE, 0x02, 0x00, 0x00, 0x5E, 0xE0, 0xCC, 0x45, 0xCE, 0x02, 0x00, 0x00, 0x77, 0x5B, 0x6E, 0x07, 0xD7, 0x02, 0x00, 0x00, 0xBE, 0x0C, 0xE2, 0xC5, 0xE9, 0x02, 0x00, 0x00, 0x8B, 0x63, 0xAA, 0x68, 0xFC, 0x02, 0x00, 0x00, 0xF4, 0x40, 0xDD, 0xD7, 0x06, 0x03, 0x00, 0x00, 0xAA, 0x25, 0x7A, 0xC1, 0x15, 0x03, 0x00, 0x00, 0x0A, 0xAD, 0x65, 0xC5, 0x1F, 0x03, 0x00, 0x00, 0x5A, 0xC3, 0xFE, 0xF8, 0x2D, 0x03, 0x00, 0x00, 0x25, 0x6E, 0xD2, 0x51, 0x3C, 0x03, 0x00, 0x00, 0x45, 0x91, 0x58, 0x83, 0x47, 0x03, 0x00, 0x00, 0xA2, 0xCF, 0x07, 0x4E, 0x53, 0x03, 0x00, 0x00, 0x1D, 0x14, 0x13, 0x34, 0x58, 0x03, 0x00, 0x00, 0x8C, 0x3D, 0xF7, 0x70, 0x5E, 0x03, 0x00, 0x00, 0xF7, 0x81, 0x39, 0x79, 0x6F, 0x03, 0x00, 0x00, 0x6C, 0x1B, 0x8D, 0xAD, 0x84, 0x03, 0x00, 0x00, 0x52, 0xBC, 0xB7, 0x15, 0x9A, 0x03, 0x00, 0x00, 0x67, 0x38, 0x36, 0x45, 0xAB, 0x03, 0x00, 0x00, 0x5A, 0x05, 0x0D, 0x97, 0xB2, 0x03, 0x00, 0x00, 0x80, 0x8A, 0x61, 0xDC, 0xB9, 0x03, 0x00, 0x00, 0xC5, 0x96, 0x94, 0x4F, 0xCD, 0x03, 0x00, 0x00, 0xCF, 0xC4, 0xC0, 0x3D, 0xF0, 0x03, 0x00, 0x00, 0xBD, 0x81, 0x6B, 0x91, 0xFB, 0x03, 0x00, 0x00, 0x22, 0x17, 0xCB, 0x4A, 0x0C, 0x04, 0x00, 0x00, 0x1E, 0x65, 0xBB, 0x4E, 0x1D, 0x04, 0x00, 0x00, 0x6D, 0xFB, 0xB5, 0x28, 0x24, 0x04, 0x00, 0x00, 0x42, 0x39, 0xDE, 0x48, 0x36, 0x04, 0x00, 0x00, 0x44, 0x82, 0xAE, 0x12, 0x3E, 0x04, 0x00, 0x00, 0xB7, 0x4B, 0x05, 0xEC, 0x4E, 0x04, 0x00, 0x00, 0x9F, 0xFC, 0xE2, 0x96, 0x5D, 0x04, 0x00, 0x00, 0xE2, 0x77, 0x80, 0x64, 0x82, 0x04, 0x00, 0x00, 0x16, 0xAD, 0x6D, 0xAD, 0x93, 0x04, 0x00, 0x00, 0xA9, 0x7E, 0xF1, 0x60, 0xA9, 0x04, 0x00, 0x00, 0x89, 0x3C, 0x39, 0xC8, 0xC0, 0x04, 0x00, 0x00, 0x5D, 0x32, 0x32, 0xA2, 0xC7, 0x04, 0x00, 0x00, 0xB4, 0x62, 0x95, 0x8F, 0xD7, 0x04, 0x00, 0x00, 0xC3, 0x4A, 0x5F, 0xA1, 0xE2, 0x04, 0x00, 0x00, 0xE2, 0xAB, 0x95, 0x91, 0xF2, 0x04, 0x00, 0x00, 0x44, 0x53, 0xE5, 0x62, 0xF8, 0x04, 0x00, 0x00, 0x21, 0x73, 0x35, 0xE2, 0xFE, 0x04, 0x00, 0x00, 0x79, 0xFD, 0x7D, 0x3E, 0x23, 0x05, 0x00, 0x00, 0x9F, 0x70, 0x1F, 0x51, 0x32, 0x05, 0x00, 0x00, 0x6C, 0x70, 0x04, 0x9A, 0x58, 0x05, 0x00, 0x00, 0x0B, 0x5A, 0x08, 0x85, 0x7F, 0x05, 0x00, 0x00, 0x6B, 0x14, 0x0E, 0xA4, 0xA7, 0x05, 0x00, 0x00, 0xD9, 0x10, 0x94, 0x83, 0xCE, 0x05, 0x00, 0x00, 0xD3, 0x59, 0xB4, 0xD6, 0xF3, 0x05, 0x00, 0x00, 0x33, 0xBA, 0xC6, 0x66, 0x19, 0x06, 0x00, 0x00, 0xC1, 0x27, 0xA1, 0xF3, 0x3E, 0x06, 0x00, 0x00, 0x23, 0xAE, 0xB4, 0x42, 0x67, 0x06, 0x00, 0x00, 0x83, 0x76, 0x8E, 0x6E, 0x91, 0x06, 0x00, 0x00, 0x51, 0x03, 0x56, 0x68, 0xBA, 0x06, 0x00, 0x00, 0x61, 0x46, 0xD7, 0x49, 0xD7, 0x06, 0x00, 0x00, 0x7D, 0xC9, 0x56, 0xED, 0xF5, 0x06, 0x00, 0x00, 0xAF, 0xBC, 0x77, 0x20, 0x12, 0x07, 0x00, 0x00, 0x9E, 0x93, 0x1C, 0x77, 0x38, 0x07, 0x00, 0x00, 0x28, 0x8D, 0xDD, 0x67, 0x5F, 0x07, 0x00, 0x00, 0xD4, 0x60, 0xCD, 0x7C, 0x85, 0x07, 0x00, 0x00, 0xB8, 0xF3, 0x59, 0x08, 0x9F, 0x07, 0x00, 0x00, 0x97, 0x5C, 0xB6, 0x6C, 0xBA, 0x07, 0x00, 0x00, 0x5C, 0xED, 0xAE, 0xFA, 0xD5, 0x07, 0x00, 0x00, 0x5C, 0x6B, 0xD8, 0xAE, 0xF6, 0x07, 0x00, 0x00, 0xBA, 0xC0, 0x03, 0x67, 0x18, 0x08, 0x00, 0x00, 0x52, 0x40, 0x21, 0x3A, 0x39, 0x08, 0x00, 0x00, 0x65, 0xE6, 0x56, 0x03, 0x5A, 0x08, 0x00, 0x00, 0xB0, 0xA6, 0x93, 0xEA, 0x66, 0x08, 0x00, 0x00, 0x67, 0x43, 0x5E, 0xB6, 0x6D, 0x08, 0x00, 0x00, 0xF1, 0x1B, 0x2D, 0x36, 0x8F, 0x08, 0x00, 0x00, 0x1B, 0x19, 0xF5, 0xEB, 0xB0, 0x08, 0x00, 0x00, 0x5A, 0xBF, 0xDA, 0xBA, 0xD1, 0x08, 0x00, 0x00, 0x34, 0x68, 0xA1, 0x25, 0xF3, 0x08, 0x00, 0x00, 0x48, 0x20, 0x4C, 0x81, 0x14, 0x09, 0x00, 0x00, 0x5E, 0xB3, 0xA1, 0x16, 0x2E, 0x09, 0x00, 0x00, 0xE8, 0x16, 0x79, 0xEC, 0x49, 0x09, 0x00, 0x00, 0x94, 0xFA, 0x0B, 0x4B, 0x63, 0x09, 0x00, 0x00, 0xEC, 0x2A, 0xB6, 0x14, 0x80, 0x09, 0x00, 0x00, 0xCE, 0xEC, 0xCA, 0x06, 0x99, 0x09, 0x00, 0x00, 0xC0, 0xD8, 0x78, 0x2A, 0xBC, 0x09, 0x00, 0x00, 0xF9, 0x8D, 0x2B, 0xB1, 0xE0, 0x09, 0x00, 0x00, 0xAD, 0xA5, 0x69, 0x6B, 0x00, 0x0A, 0x00, 0x00, 0x6B, 0x95, 0x31, 0x94, 0x12, 0x0A, 0x00, 0x00, 0xEB, 0x8C, 0x36, 0x45, 0x1D, 0x0A, 0x00, 0x00, 0xE3, 0x97, 0x65, 0x98, 0x26, 0x0A, 0x00, 0x00, 0xF7, 0x74, 0xAC, 0x2B, 0x31, 0x0A, 0x00, 0x00, 0x4A, 0xCB, 0xA3, 0x69, 0x43, 0x0A, 0x00, 0x00, 0xE8, 0x52, 0x8F, 0xB2, 0x5A, 0x0A, 0x00, 0x00, 0x4F, 0x9E, 0xE8, 0xCE, 0x66, 0x0A, 0x00, 0x00, 0x31, 0x93, 0x2D, 0x24, 0x7A, 0x0A, 0x00, 0x00, 0x34, 0xDA, 0xB3, 0x36, 0x88, 0x0A, 0x00, 0x00, 0x49, 0x08, 0x29, 0xCD, 0x9D, 0x0A, 0x00, 0x00, 0xFE, 0x70, 0xA4, 0x56, 0xB5, 0x0A, 0x00, 0x00, 0x70, 0x00, 0xC6, 0x1C, 0xBB, 0x0A, 0x00, 0x00, 0xF8, 0x0B, 0x1B, 0x4D, 0xCD, 0x0A, 0x00, 0x00, 0x59, 0x69, 0x25, 0xD8, 0xD6, 0x0A, 0x00, 0x00, 0x92, 0xE2, 0x48, 0xB7, 0xE9, 0x0A, 0x00, 0x00, 0xAB, 0xA1, 0xAA, 0x33, 0xFD, 0x0A, 0x00, 0x00, 0xE1, 0x0C, 0x1C, 0xBE, 0x1F, 0x0B, 0x00, 0x00, 0x4A, 0x87, 0x1E, 0xE4, 0x41, 0x0B, 0x00, 0x00, 0xB3, 0x01, 0x21, 0x0A, 0x63, 0x0B, 0x00, 0x00, 0x71, 0xC8, 0x83, 0x89, 0x83, 0x0B, 0x00, 0x00, 0x9B, 0x8A, 0x41, 0x05, 0xA2, 0x0B, 0x00, 0x00, 0x48, 0x2D, 0xB1, 0xE4, 0xB9, 0x0B, 0x00, 0x00, 0xE5, 0x32, 0x76, 0xD8, 0xD3, 0x0B, 0x00, 0x00, 0x33, 0xEF, 0x70, 0xE3, 0xE4, 0x0B, 0x00, 0x00, 0xDB, 0x78, 0x46, 0x0E, 0x06, 0x0C, 0x00, 0x00, 0x5C, 0x10, 0xC7, 0xD0, 0x24, 0x0C, 0x00, 0x00, 0x37, 0xE5, 0xB5, 0x68, 0x44, 0x0C, 0x00, 0x00, 0xCB, 0x77, 0x09, 0xBB, 0x5E, 0x0C, 0x00, 0x00, 0x9C, 0xF8, 0x00, 0x68, 0x7C, 0x0C, 0x00, 0x00, 0xE8, 0x32, 0x20, 0x3E, 0x98, 0x0C, 0x00, 0x00, 0x7E, 0x1C, 0x9A, 0xCD, 0xB5, 0x0C, 0x00, 0x00, 0xDD, 0x82, 0xF5, 0x9E, 0xD6, 0x0C, 0x00, 0x00, 0xED, 0x48, 0xA7, 0x3E, 0xF5, 0x0C, 0x00, 0x00, 0xCC, 0x4A, 0x67, 0x38, 0x1A, 0x0D, 0x00, 0x00, 0x3D, 0x0C, 0xCF, 0xEF, 0x2F, 0x0D, 0x00, 0x00, 0xB7, 0x08, 0x32, 0x99, 0x47, 0x0D, 0x00, 0x00, 0x62, 0xAD, 0x10, 0xAC, 0x60, 0x0D, 0x00, 0x00, 0x9C, 0xD1, 0xEE, 0x8F, 0x7A, 0x0D, 0x00, 0x00, 0x54, 0x2B, 0x32, 0xC4, 0x8C, 0x0D, 0x00, 0x00, 0xD0, 0x61, 0xAA, 0x5F, 0x99, 0x0D, 0x00, 0x00, 0xB9, 0x77, 0xFF, 0x5C, 0xA0, 0x0D, 0x00, 0x00, 0xEE, 0x4C, 0x0A, 0x48, 0xAC, 0x0D, 0x00, 0x00, 0xF9, 0x43, 0xC2, 0x1E, 0xB1, 0x0D, 0x00, 0x00, 0x70, 0x08, 0xA5, 0xAB, 0xBD, 0x0D, 0x00, 0x00, 0x47, 0x8A, 0x8C, 0xA7, 0xE0, 0x0D, 0x00, 0x00, 0x87, 0x7A, 0x10, 0xDD, 0x04, 0x0E, 0x00, 0x00, 0xFD, 0xAF, 0x9F, 0xD1, 0x27, 0x0E, 0x00, 0x00, 0x40, 0x70, 0xD7, 0x6D, 0x43, 0x0E, 0x00, 0x00, 0x49, 0x91, 0x65, 0x7D, 0x4F, 0x0E, 0x00, 0x00, 0x60, 0x2A, 0x42, 0x64, 0x60, 0x0E, 0x00, 0x00, 0x18, 0x02, 0x3D, 0xF7, 0x6B, 0x0E, 0x00, 0x00, 0xBF, 0x0D, 0x2D, 0x02, 0x74, 0x0E, 0x00, 0x00, 0x32, 0x62, 0x83, 0x46, 0x7E, 0x0E, 0x00, 0x00, 0x93, 0x8C, 0xAC, 0x27, 0xB1, 0x0E, 0x00, 0x00, 0xF3, 0x95, 0x03, 0x46, 0xE5, 0x0E, 0x00, 0x00, 0x81, 0xD4, 0x52, 0x73, 0x18, 0x0F, 0x00, 0x00, 0x43, 0xE5, 0x8D, 0x7C, 0x2E, 0x0F, 0x00, 0x00, 0xCD, 0xAD, 0x07, 0x95, 0x50, 0x0F, 0x00, 0x00, 0xF3, 0x48, 0x2F, 0xF1, 0x6D, 0x0F, 0x00, 0x00, 0x80, 0xE6, 0x26, 0x71, 0x7B, 0x0F, 0x00, 0x00, 0x10, 0xB5, 0x1D, 0x16, 0x9F, 0x0F, 0x00, 0x00, 0x41, 0xE5, 0xF2, 0xAE, 0xB2, 0x0F, 0x00, 0x00, 0x2A, 0x62, 0x92, 0x89, 0xBB, 0x0F, 0x00, 0x00, 0x5D, 0x8D, 0x76, 0xBF, 0xCC, 0x0F, 0x00, 0x00, 0xA3, 0x3D, 0x4F, 0x72, 0xD6, 0x0F, 0x00, 0x00, 0x70, 0x1A, 0x6C, 0x2B, 0xE7, 0x0F, 0x00, 0x00, 0x8C, 0x0B, 0x1E, 0x8E, 0xF2, 0x0F, 0x00, 0x00, 0x98, 0x39, 0x79, 0x28, 0x05, 0x10, 0x00, 0x00, 0xBF, 0xC9, 0xDA, 0x61, 0x0A, 0x10, 0x00, 0x00, 0xB6, 0x00, 0x00, 0x00, 0x44, 0x10, 0x00, 0x00, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x0B, 0x00, 0x00, 0x7C, 0x0B, 0x00, 0x00, 0x3E, 0xE3, 0x22, 0x21, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x33, 0x00, 0x00, 0xCC, 0x33, 0x00, 0x00, 0xD9, 0xE9, 0xA6, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA2, 0x21, 0x00, 0x00, 0xA2, 0x21, 0x00, 0x00, 0x9A, 0xAF, 0x2F, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x55, 0x00, 0x00, 0x38, 0x55, 0x00, 0x00, 0xA0, 0x5C, 0xF4, 0xB6, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x22, 0x00, 0x00, 0xCE, 0x22, 0x00, 0x00, 0x48, 0xEA, 0x2F, 0x6A, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC3, 0x00, 0x00, 0xC6, 0xC3, 0x00, 0x00, 0x3D, 0x28, 0x98, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x86, 0x00, 0x00, 0x5E, 0x86, 0x00, 0x00, 0x72, 0x56, 0xC7, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x32, 0x00, 0x00, 0xFA, 0x32, 0x00, 0x00, 0xCB, 0xD6, 0xDF, 0x48, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xCB, 0x00, 0x00, 0x7C, 0xCB, 0x00, 0x00, 0x2F, 0x13, 0x2E, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDA, 0xBB, 0x00, 0x00, 0xDA, 0xBB, 0x00, 0x00, 0xFE, 0xC3, 0xF2, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x38, 0x00, 0x00, 0xEE, 0x38, 0x00, 0x00, 0xC1, 0x2A, 0x27, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x72, 0x00, 0x00, 0x18, 0x72, 0x00, 0x00, 0x38, 0xA2, 0x02, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF2, 0x76, 0x00, 0x00, 0xF2, 0x76, 0x00, 0x00, 0xF4, 0xF3, 0x0B, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x54, 0x00, 0x00, 0xE4, 0x54, 0x00, 0x00, 0xBE, 0xFA, 0x6D, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x5F, 0x00, 0x00, 0x94, 0x5F, 0x00, 0x00, 0xB5, 0x12, 0xD9, 0x72, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x63, 0x00, 0x00, 0x84, 0x63, 0x00, 0x00, 0x5A, 0x7F, 0x13, 0x19, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x96, 0x01, 0x00, 0x68, 0x96, 0x01, 0x00, 0xAA, 0x01, 0x2A, 0xE6, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xD2, 0x00, 0x00, 0xC6, 0xD2, 0x00, 0x00, 0xC5, 0x06, 0x44, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x15, 0x01, 0x00, 0x56, 0x15, 0x01, 0x00, 0xEC, 0x7C, 0x90, 0x9D, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x49, 0x00, 0x00, 0x2C, 0x49, 0x00, 0x00, 0x4D, 0x5A, 0xF2, 0x57, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDE, 0x4B, 0x00, 0x00, 0xDE, 0x4B, 0x00, 0x00, 0x91, 0xB9, 0x70, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0xA6, 0x00, 0x00, 0x14, 0xA6, 0x00, 0x00, 0x62, 0x09, 0xCE, 0x60, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x45, 0x00, 0x00, 0x06, 0x45, 0x00, 0x00, 0xDD, 0xC0, 0xBF, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x6D, 0x74, 0x97, 0x12, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x57, 0x00, 0x00, 0x24, 0x57, 0x00, 0x00, 0x1E, 0x3F, 0x28, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x1B, 0x00, 0x00, 0x30, 0x1B, 0x00, 0x00, 0xD3, 0x3F, 0xCF, 0x86, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x50, 0x00, 0x00, 0x94, 0x50, 0x00, 0x00, 0x17, 0x1E, 0x4E, 0x25, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x4A, 0x00, 0x00, 0x8E, 0x4A, 0x00, 0x00, 0x0E, 0xB7, 0xA1, 0xB4, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7A, 0x37, 0x00, 0x00, 0x7A, 0x37, 0x00, 0x00, 0x09, 0xA9, 0x6E, 0x42, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x3C, 0x00, 0x00, 0xA8, 0x3C, 0x00, 0x00, 0xD1, 0x88, 0xE7, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x51, 0x00, 0x00, 0xCC, 0x51, 0x00, 0x00, 0xBA, 0xE1, 0xB6, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x2B, 0x00, 0x00, 0x3E, 0x2B, 0x00, 0x00, 0x31, 0x6D, 0x48, 0x53, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x28, 0x00, 0x00, 0x62, 0x28, 0x00, 0x00, 0xA3, 0x47, 0x62, 0x4B, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x65, 0x00, 0x00, 0x10, 0x65, 0x00, 0x00, 0x5A, 0x9B, 0x17, 0xEC, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x00, 0x00, 0x54, 0x45, 0x00, 0x00, 0x96, 0xDD, 0xB5, 0xA6, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8A, 0x4E, 0x00, 0x00, 0x8A, 0x4E, 0x00, 0x00, 0x0D, 0x84, 0x0B, 0xB2, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x81, 0x00, 0x00, 0xEA, 0x81, 0x00, 0x00, 0x20, 0xB5, 0xB2, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x20, 0x00, 0x00, 0x94, 0x20, 0x00, 0x00, 0x00, 0x29, 0x67, 0xD1, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x44, 0x00, 0x00, 0x2E, 0x44, 0x00, 0x00, 0x68, 0xFF, 0xF1, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF2, 0x48, 0x01, 0x00, 0xF2, 0x48, 0x01, 0x00, 0xD3, 0x6B, 0xE8, 0x72, 0x00, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x5A, 0x00, 0x00, 0xFF, 0x5A, 0x00, 0x00, 0x58, 0x3D, 0x56, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x51, 0x00, 0x00, 0xF0, 0x51, 0x00, 0x00, 0x58, 0xFE, 0xAD, 0x09, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x52, 0x00, 0x00, 0xD4, 0x52, 0x00, 0x00, 0x24, 0xC6, 0x95, 0x6A, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x9B, 0x00, 0x00, 0xD6, 0x9B, 0x00, 0x00, 0x93, 0xAC, 0x5F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x3A, 0x01, 0x00, 0x2E, 0x3A, 0x01, 0x00, 0x0D, 0xB5, 0x68, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x27, 0x00, 0x00, 0x6C, 0x27, 0x00, 0x00, 0x54, 0xEA, 0xFB, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x49, 0x00, 0x00, 0x62, 0x49, 0x00, 0x00, 0xA7, 0xFB, 0xBA, 0x61, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0xC1, 0x00, 0x00, 0x74, 0xC1, 0x00, 0x00, 0x5F, 0x3B, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x2D, 0x00, 0x00, 0x12, 0x2D, 0x00, 0x00, 0xB5, 0xAB, 0x6F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x15, 0x00, 0x00, 0x12, 0x15, 0x00, 0x00, 0x87, 0xBD, 0xB7, 0x63, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x14, 0x01, 0x00, 0xF0, 0x14, 0x01, 0x00, 0xD9, 0x05, 0xF4, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x5B, 0x00, 0x00, 0x44, 0x5B, 0x00, 0x00, 0x21, 0xC5, 0x55, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA2, 0x54, 0x00, 0x00, 0xA2, 0x54, 0x00, 0x00, 0x30, 0x16, 0x48, 0xAC, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x29, 0x00, 0x00, 0x8E, 0x29, 0x00, 0x00, 0x0B, 0xCF, 0x61, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x3C, 0x01, 0x00, 0xFE, 0x3C, 0x01, 0x00, 0x0A, 0xC2, 0x89, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xDB, 0x00, 0x00, 0x4E, 0xDB, 0x00, 0x00, 0xAF, 0xE1, 0xD5, 0x64, 0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x69, 0x00, 0x00, 0xF3, 0x69, 0x00, 0x00, 0x8F, 0x77, 0x59, 0x98, 0x00, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x3A, 0x00, 0x00, 0x4A, 0x3A, 0x00, 0x00, 0xA4, 0xF2, 0x65, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x2C, 0x01, 0x00, 0x48, 0x2C, 0x01, 0x00, 0x0D, 0x7D, 0x9D, 0xAC, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x77, 0x00, 0x00, 0xA6, 0x77, 0x00, 0x00, 0x5B, 0xE1, 0x56, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE6, 0x73, 0x00, 0x00, 0xE6, 0x73, 0x00, 0x00, 0xC5, 0x3F, 0xEA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x43, 0x01, 0x00, 0x10, 0x43, 0x01, 0x00, 0xDC, 0xB4, 0xDA, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x51, 0x00, 0x00, 0x42, 0x51, 0x00, 0x00, 0x08, 0x25, 0x33, 0xC9, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6A, 0x2C, 0x00, 0x00, 0x6A, 0x2C, 0x00, 0x00, 0xCC, 0x21, 0xF4, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x3D, 0x00, 0x00, 0x44, 0x3D, 0x00, 0x00, 0x79, 0x33, 0x1C, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9A, 0xAF, 0x01, 0x00, 0x9A, 0xAF, 0x01, 0x00, 0xB0, 0x12, 0xE3, 0xD9, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0x38, 0x00, 0x00, 0xE2, 0x38, 0x00, 0x00, 0x9D, 0x63, 0x16, 0x24, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xC8, 0x00, 0x00, 0xE8, 0xC8, 0x00, 0x00, 0x4F, 0xD5, 0xF7, 0x6A, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x97, 0x00, 0x00, 0x0E, 0x97, 0x00, 0x00, 0x94, 0x94, 0x94, 0xC9, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x60, 0x00, 0x00, 0x12, 0x60, 0x00, 0x00, 0x96, 0x23, 0x6E, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA, 0x60, 0x00, 0x00, 0xBA, 0x60, 0x00, 0x00, 0x91, 0xC4, 0xDB, 0x69, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3D, 0x00, 0x00, 0x38, 0x3D, 0x00, 0x00, 0x7D, 0xE1, 0xBB, 0x42, 0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x46, 0x00, 0x00, 0xF8, 0x46, 0x00, 0x00, 0xBB, 0x33, 0x8A, 0x38, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x41, 0x00, 0x00, 0x0A, 0x41, 0x00, 0x00, 0xF9, 0xA7, 0x7D, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x38, 0x00, 0x00, 0x28, 0x38, 0x00, 0x00, 0xA9, 0x18, 0xDE, 0x01, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x4E, 0x00, 0x00, 0x66, 0x4E, 0x00, 0x00, 0x8D, 0xE2, 0xB5, 0x13, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x0B, 0x02, 0x00, 0x38, 0x0B, 0x02, 0x00, 0x91, 0xC3, 0xFB, 0x85, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x2C, 0x00, 0x00, 0x58, 0x2C, 0x00, 0x00, 0xA0, 0x17, 0x5B, 0x0C };
            using (MemoryStream ms = new MemoryStream(data))
            using (BinaryReader br = new BinaryReader(ms))
            {
                W2AnimFile = new CR2WFile(br);
                createAnimationSet();
            }
            var skelEntry = importJsonAnim(jsonFile);*/
            //////////////////////////////////////////

            Dictionary<string, int> nameToChunkIdx = new Dictionary<string, int>();
            int ret = -1;

            Dictionary<string, List<string>> soundEvents = new Dictionary<string, List<string>>();
            List<string> soundTypes = new List<string>() { "CExtAnimCutsceneSoundEvent",
                "CExtAnimFootstepEvent", "CExtAnimSoundEvent", "CFXTrackItemSoundEvent" };

            int idx = 0;
            foreach (var chunk in animsFile2.chunks)
            {
                if (chunk.Type == "CSkeletalAnimationSetEntry")
                {
                    //var vars = chunk.GetEditableVariables();
                    var animRef = chunk.GetVariableByName("animation");
                    var animName = "-";
                    if (animRef is CPtr)
                    {
                        var animNameVar = (animRef as CPtr).Reference.GetVariableByName("name");
                        if (animNameVar != null)
                            animName = (animRef as CPtr).Reference.GetVariableByName("name").ToString();
                    }

                    if (animName == "-")
                        continue;

                    var entries1 = chunk.data as CR2W.Types.CSkeletalAnimationSetEntry;
                    foreach (var item in entries1.entries)
                    {
                        if (soundTypes.Contains(item.Type) )
                        {
                            var soundVar = (item as CVector).GetVariableByName("soundEventName");
                            if (soundVar != null && soundVar is CStringAnsi)
                            {
                                if (!soundEvents.ContainsKey(animName))
                                {
                                    soundEvents.Add(animName, new List<string>());
                                }
                                soundEvents[animName].Add( (soundVar as CStringAnsi).val );
                            }
                        }
                    }
                    //nameToChunkIdx.Add(animName, idx);
                }
                ++idx;
            }

            //var chunks = animsFile.chunks;
            int chunkIndex = 0;
            var context = new CR2WCopyAction
            {
                SourceFile = animsFile,
                DestinationFile = animsFile2,
                MaxIterationDepth = 10,
                ExcludeProperties = null,
                ExcludeChunks = null,
                StorySceneRemoveUnnessaryTeleportation = false,
                StorySceneRemoveAddFacts = false,
                StorySceneCopyDialogsets = false,
                StorySceneCopyCameras = false
            };

            foreach (var chunk in animsFile.chunks)
            {
                Console.WriteLine("chunk [" + chunk.ChunkIndex + "], type = " + chunk.Type + ", name = " + chunk.Name);
                if (chunk.Type == "CSkeletalAnimationSetEntry")
                {
                    //var vars = chunk.GetEditableVariables();
                    var animRef = chunk.GetVariableByName("animation");
                    var animName = "-";
                    if (animRef is CPtr)
                    {
                        //CPtr animPtr = animRef as CPtr;
                        var animNameVar = (animRef as CPtr).Reference.GetVariableByName("name");
                        if (animNameVar != null)
                            animName = (animRef as CPtr).Reference.GetVariableByName("name").ToString();
                    }

                    if (animName == "-")
                        continue;

                    var eventIndex = 0;
                    Console.WriteLine("animName = " + animName + ", animRef type = " + animRef.Type + ", name = " + animRef.Name + ", value = " + animRef.ToString());

                    //var entriesVar = chunk.data as CR2W.Types.CSkeletalAnimationSetEntry;
                    //foreach (var entry in entriesVar.entries)
                    //{
                    //    Console.WriteLine("entry type = " + entry.Type + ", value = " + entry.ToString());
                    //}
                    //Console.WriteLine("entriesVar type = " + entriesVar.Type + ", value = " + entriesVar.ToString());

                    //////////////////////////////
                    if ( soundEvents.ContainsKey(animName) )
                    {
                        Console.WriteLine("COPY VARS!!");
                        var entries2 = chunk.data as CR2W.Types.CSkeletalAnimationSetEntry;
                        foreach (var item in entries2.entries)
                        {
                            if (soundTypes.Contains(item.Type))
                            {
                                var soundVar = (item as CVector).GetVariableByName("soundEventName");
                                if (soundVar != null && soundVar is CStringAnsi && eventIndex < soundEvents[animName].Count())
                                {
                                    (soundVar as CStringAnsi).val = soundEvents[animName][eventIndex];
                                    eventIndex += 1;
                                    ret += 1;
                                }
                            }
                        }
                        chunk.data = entries2;
                    }

                }
                ++chunkIndex;
            }

            //animsFile.chunks = chunks;

            using (var mem = new MemoryStream())
            using (var writer = new BinaryWriter(mem))
            {
                animsFile.Write(writer);
                mem.Seek(0, SeekOrigin.Begin);

                using (var fs = new FileStream(animsFile.FileName + "-new.w2anims", FileMode.Create, FileAccess.Write))
                {
                    mem.WriteTo(fs);
                    fs.Close();
                }
            }
            return ret + 1;
        }

        public void adjustEffectCR2W(CR2WFile effectCR2W)
        {

        }
        public int adjustNRHeadFCD(CR2WFile headFileFCD)
        {
            foreach (var chunk in headFileFCD.chunks)
            {
                if (chunk.Type == "CItemEntity")
                {
                    var comps = chunk.GetVariableByName("components");
                    Console.WriteLine($"comps Type: {comps.GetType()}");

                    var compHandles = comps.GetEditableVariables();
                    Console.WriteLine($"compPtrs Type: {compHandles.GetType()}");
                    foreach (var compHandle in compHandles)
                    {
                        if (!(compHandle is CHandle))
                            continue;
                        var compChunk = (compHandle as CHandle).Reference;
                        var compData = compChunk.data as CR2W.Types.CComponent;
                        var name = compData.GetVariableByName("name");
                        Console.WriteLine($"Comp: [{compChunk.Type}]: {compChunk.Name}, name = {name}");
                        if (compChunk.Type == "CMimicComponent")
                        {
                            var mimicFace = compData.GetVariableByName("mimicFace");
                            (mimicFace as CHandle).DepotPath = "myface.w3rig";
                        }
                        if (compChunk.Type == "CMeshComponent")
                        {
                            var mesh = compData.GetVariableByName("mesh");
                            (mesh as CHandle).DepotPath = "mymesh_" + name + ".w2mesh";
                        }
                        if (compChunk.Type == "CNormalBlendComponent")
                        {
                            var materialHandle = compData.GetVariableByName("normalBlendMaterial");
                            var materialChunk = (materialHandle as CHandle).Reference;
                            var materialData = materialChunk.data as CMaterialInstance;
                            var instanceParams = materialData.instanceParameters;

                            var NormalHandle = instanceParams.GetVariableByName("Normal") as CHandle;
                            var DiffuseHandle = instanceParams.GetVariableByName("Diffuse") as CHandle;
                            var AmbientHandle = instanceParams.GetVariableByName("Ambient") as CHandle;
                            var NormalBlendTextureHandle = instanceParams.GetVariableByName("NormalBlendTexture") as CHandle;
                            NormalHandle.DepotPath = "NormalHandle.xbm";
                            DiffuseHandle.DepotPath = "DiffuseHandle.xbm";
                            AmbientHandle.DepotPath = "AmbientHandle.xbm";
                            NormalBlendTextureHandle.DepotPath = "NormalBlendTexture.xbm";
                        }
                    }
                }
            }
            return 0;
        }
        
        
        public int adjustNRHead(CR2WFile headFile)
        {
            foreach (var chunk in headFile.chunks)
            {
                if (chunk.Type == "CEntityTemplate")
                {
                    /*var appsVar = chunk.GetVariableByName("appearances");
                    if (appsVar != null)
                    {
                        Console.WriteLine($"apps: {appsVar.Name}");
                        var apps = appsVar.GetEditableVariables();
                        foreach (var app in apps) {
                            var appVars = app.GetEditableVariables();
                            foreach (var appVar in appVars)
                            {
                                if (appVar.Name == "name") {
                                    (appVar as CName).SetValue("triss");
                                }
                                Console.WriteLine($"[{appVar.Type}]{appVar.Name}: {appVar.ToString()}");
                            }
                        }
                    }*/
                    var entChunk = (chunk.GetVariableByName("entityObject") as CPtr).Reference;

                    var comps = entChunk.GetVariableByName("components");
                    Console.WriteLine($"comps Type: {comps.GetType()}");

                    var compHandles = comps.GetEditableVariables();
                    Console.WriteLine($"compPtrs Type: {compHandles.GetType()}");
                    foreach (var compHandle in compHandles)
                    {
                        if (!(compHandle is CHandle))
                            continue;
                        var compChunk = (compHandle as CHandle).Reference;
                        var compData = compChunk.data as CR2W.Types.CComponent;
                        var name = compData.GetVariableByName("name");
                        Console.WriteLine($"Comp: [{compChunk.Type}]: {compChunk.Name}, name = {name}");
                        if (compChunk.Type == "CMimicComponent")
                        {
                            var mimicFace = compData.GetVariableByName("mimicFace");
                            (mimicFace as CHandle).DepotPath = "myface.w3rig";
                        }
                        if (compChunk.Type == "CMeshComponent")
                        {
                            var mesh = compData.GetVariableByName("mesh");
                            (mesh as CHandle).DepotPath = "mymesh_" + name + ".w2mesh";
                        }
                        if (compChunk.Type == "CNormalBlendComponent")
                        {
                            var materialHandle = compData.GetVariableByName("normalBlendMaterial");
                            var materialChunk = (materialHandle as CHandle).Reference;
                            var materialData = materialChunk.data as CMaterialInstance;
                            var instanceParams = materialData.instanceParameters;

                            var NormalHandle = instanceParams.GetVariableByName("Normal") as CHandle;
                            var DiffuseHandle = instanceParams.GetVariableByName("Diffuse") as CHandle;
                            var AmbientHandle = instanceParams.GetVariableByName("Ambient") as CHandle;
                            var NormalBlendTextureHandle = instanceParams.GetVariableByName("NormalBlendTexture") as CHandle;
                            NormalHandle.DepotPath = "NormalHandle.xbm";
                            DiffuseHandle.DepotPath = "DiffuseHandle.xbm";
                            AmbientHandle.DepotPath = "AmbientHandle.xbm";
                            NormalBlendTextureHandle.DepotPath = "NormalBlendTexture.xbm";
                        }
                    }

                    var fcd = chunk.GetVariableByName("flatCompiledData");
                    WolvenKit.CR2W.Editors.IByteSource fcdBytes = ((WolvenKit.CR2W.Editors.IByteSource)fcd);

                    CR2WFile fcdCR2W = new CR2WFile(fcdBytes.Bytes);
                    adjustNRHeadFCD(fcdCR2W);
                    fcdBytes.Bytes = fcdCR2W.Bytes();

                    var effectsVar = chunk.GetVariableByName("cookedEffects");
                    var effects = effectsVar.GetEditableVariables();
                    foreach (var effect in effects)
                    {
                        var effectVars = effect.GetEditableVariables();
                        foreach (var effectVar in effectVars)
                        {
                            if (effectVar.Name == "name")
                            {
                                Console.WriteLine($"Effect name: {(effectVar as CName).Value}");
                            }
                            else if (effectVar.Name == "buffer")
                            {
                                CR2WFile effectCR2W = new CR2WFile(((WolvenKit.CR2W.Editors.IByteSource)effectVar).Bytes);
                                adjustEffectCR2W(effectCR2W);
                            }
                        }
                    }
                }
            }

            using (var mem = new MemoryStream())
            using (var writer = new BinaryWriter(mem))
            {
                headFile.Write(writer);
                mem.Seek(0, SeekOrigin.Begin);

                using (var fs = new FileStream(headFile.FileName + "-new.w2ent", FileMode.Create, FileAccess.Write))
                {
                    mem.WriteTo(fs);
                    fs.Close();
                }
            }
            return 0;
        }
        public int dumpW2animsNames(CR2WFile animsFile)
        {
            DialogResult markAdditives = MessageBox.Show("Do you want to mark anim types?", "Question", MessageBoxButtons.YesNo);
            List<string> animNames = new List<string>();
            string duplications = string.Empty;
            int duplCnt = 0;
            int ret = -1;

            int idx = 0;
            foreach (var chunk in animsFile.chunks)
            {
                if (chunk.Type == "CSkeletalAnimationSetEntry")
                {
                    var animRef = chunk.GetVariableByName("animation");
                    var animName = "-";
                    var animType = "SAT_Normal";
                    var animAdditiveType = "AT_Local";
                    if (animRef is CPtr)
                    {
                        var CSkelAnimChunk = (animRef as CPtr).Reference;
                        
                        var animNameVar = CSkelAnimChunk.GetVariableByName("name");
                        if (animNameVar != null)
                            animName = animNameVar.ToString();

                        var animTypeVar = CSkelAnimChunk.GetVariableByName("Animation type for reimport");
                        if (animTypeVar != null)
                            animType = animTypeVar.ToString();

                        var animAddTypeVar = CSkelAnimChunk.GetVariableByName("Additive type for reimport");
                        if (animAddTypeVar != null)
                            animAdditiveType = animAddTypeVar.ToString();
                    }

                    if (animName == "-")
                        continue;

                    if (markAdditives == DialogResult.Yes)
                    {
                        animName += "|" + animType + "|" + animAdditiveType;
                    }

                    if (animNames.Contains(animName))
                    {
                        duplications += animName + "\n";
                        ++duplCnt;
                    } else
                    {
                        animNames.Add(animName);
                    }
                    ++ret;
                }
                ++idx;
            }

            if (duplCnt > 0)
            {
                MessageBox.Show(duplCnt + " duplicated names detected:\n" + duplications, "WARNING", MessageBoxButtons.OK);
            }

            File.WriteAllText( animsFile.FileName + "-names.txt", string.Join("\n", animNames.ToArray()) );
            File.WriteAllText( animsFile.FileName + "-additives.txt", string.Join("\n", animNames.ToArray()) );
            return ret + 1;
        }

        public void createAnimationSet()
        {
            var SkeletalAnimationSet = W2AnimFile.CreateChunk("CSkeletalAnimationSet");
            CVariable animPointerArr = animVar("array:2,0,ptr:CSkeletalAnimationSetEntry", "animations", SkeletalAnimationSet.cr2w);
            SkeletalAnimationSet.data.AddVariable(animPointerArr);
            //(animPointerArr as CArray).AddVariable(animVar("ptr:CSkeletalAnimationSetEntry", null, SkeletalAnimationSet.cr2w).SetValue(2));
            SkeletalAnimationSet.data.AddVariable(animVar("SAnimationBufferStreamingOption", "Streaming option", SkeletalAnimationSet.cr2w).SetValue("ABSO_FullyStreamable"));
        }
        //CR2WExportWrapper createChunks(int bufferNumber, CSkeletalAnimation loadedAnim, int bonelistCount)
        //{

        //}

        public CSkeletalAnimationSetEntry importJsonAnim(string filename) {
            CSkeletalAnimationSetEntry loadedSetEntry;
            using (StreamReader r = new StreamReader(filename))
            {
                string json = r.ReadToEnd();
                JsonConverter[] converters = { new BufferConverter(), new IMotionExtractionConverter(), new CVariableConverter(W2AnimFile) };
                var jset = new JsonSerializerSettings() { Converters = converters, NullValueHandling = NullValueHandling.Ignore };
                loadedSetEntry = JsonConvert.DeserializeObject<CSkeletalAnimationSetEntry>(json, jset);
            }
            return loadedSetEntry;
        }

        public void createAnimation(CSkeletalAnimationSetEntry loadedSetEntry, int i, string savefileName)
        {
            CSkeletalAnimation loadedAnim;
            loadedAnim = loadedSetEntry.animation;


            int bufferNumber = i + 1;
            //CR2WExportWrapper SkeletalAnimationSetEntry = createChunks(bufferNumber, loadedAnim, bonelist.Count());


            //createMotionExtraction = false;
            CR2WExportWrapper SkeletalAnimationSet = w2AnimFile.chunks[0];
            CR2WExportWrapper SkeletalAnimationSetEntry = W2AnimFile.CreateChunk("CSkeletalAnimationSetEntry");
            CR2WExportWrapper SkeletalAnimation = W2AnimFile.CreateChunk("CSkeletalAnimation");
            CR2WExportWrapper MotionExtraction2;


            (SkeletalAnimationSet.GetVariableByName("animations") as CArray).AddVariable((animVar("ptr:CSkeletalAnimationSetEntry", null, SkeletalAnimationSet.cr2w) as CPtr).SetValue(SkeletalAnimationSetEntry));

            SkeletalAnimationSetEntry.data.AddVariable((animVar("ptr:CSkeletalAnimation", "animation", SkeletalAnimationSetEntry.cr2w) as CPtr).SetValue(SkeletalAnimation));

            // SkeletalAnimation start
            SkeletalAnimation.data.AddVariable(animVar("CName", "name", SkeletalAnimation.cr2w).SetValue(loadedAnim.name));
            SkeletalAnimation.data.AddVariable(animVar("Float", "framesPerSecond", SkeletalAnimation.cr2w).SetValue(loadedAnim.framesPerSecond));
            SkeletalAnimation.data.AddVariable(animVar("Float", "duration", SkeletalAnimation.cr2w).SetValue( (float)Math.Round(loadedAnim.duration, 8) ));

            //CR2WExportWrapper SkeletalAnimationSetEntry = SkeletalAnimationSetEntry;
            foreach (var entry in SkeletalAnimationSetEntry.data.GetEditableVariables())
            {
                //loadedSetEntry.entries
                if (entry.Name == "entries")
                {
                    foreach (CVariable item in loadedSetEntry.entries)
                    {
                        entry.AddVariable(item);
                    }
                }
            }

            CR2WExportWrapper bitbuff;
            if (loadedAnim.animBuffer.GetType() == typeof(CAnimationBufferMultipart))
            {
                CAnimationBufferMultipart i_multipart = loadedAnim.animBuffer as CAnimationBufferMultipart;
                CR2WExportWrapper bitbuffMulti = W2AnimFile.CreateChunk("CAnimationBufferMultipart");
                bitbuffMulti.data.AddVariable(animVar("Uint32", "numFrames", w2AnimFile).SetValue(i_multipart.numFrames));
                bitbuffMulti.data.AddVariable(animVar("Uint32", "numTracks", w2AnimFile).SetValue(i_multipart.numTracks));
                bitbuffMulti.data.AddVariable(animVar("Uint32", "numBones", w2AnimFile).SetValue(i_multipart.numBones));

                bitbuffMulti.data.AddVariable(animVar("array:2,0,Uint32", "firstFrames", w2AnimFile));
                foreach (uint item in i_multipart.firstFrames)
                {
                    bitbuffMulti.GetVariableByName("firstFrames").AddVariable(animVar("Uint32", "Uint32", w2AnimFile).SetValue(item));
                }
                //public uint numFrames;
                //public uint numBones;
                //public uint numTracks;
                //public List<uint> firstFrames = new ><uint>();


                //public ><CAnimationBufferBitwiseCompressed> parts = new ><CAnimationBufferBitwiseCompressed>();
                bitbuffMulti.data.AddVariable(animVar("array:2,0,ptr:IAnimationBuffer", "parts", w2AnimFile));
                foreach (CAnimationBufferBitwiseCompressed bufferPart in (loadedAnim.animBuffer as CAnimationBufferMultipart).parts)
                {
                    CR2WExportWrapper bitbuffpart = getBitBuff(bufferPart, bufferNumber, savefileName);
                    bitbuffMulti.GetVariableByName("parts").AddVariable((animVar("ptr:IAnimationBuffer", "part", bitbuffpart.cr2w) as CPtr).SetValue(bitbuffpart));
                    //createAnimationPart(bufferPart, i, savefileName);
                }
                bitbuff = bitbuffMulti;
            }
            else
            {
                //createAnimationPart((loadedAnim.animBuffer as CAnimationBufferBitwiseCompressed), i, savefileName);

                bitbuff = getBitBuff((loadedAnim.animBuffer as CAnimationBufferBitwiseCompressed),  bufferNumber, savefileName);
            }

            SkeletalAnimation.data.AddVariable((animVar("ptr:IAnimationBuffer", "animBuffer", SkeletalAnimation.cr2w) as CPtr).SetValue(bitbuff));



            if (loadedAnim.motionExtraction != null)
            {
                MotionExtraction2 = W2AnimFile.CreateChunk("CLineMotionExtraction2");
                SkeletalAnimation.data.AddVariable((animVar("ptr:IAnimationBuffer", "motionExtraction", SkeletalAnimation.cr2w) as CPtr).SetValue(MotionExtraction2));

                MotionExtraction2.data.AddVariable(animVar("Float", "duration", MotionExtraction2.cr2w).SetValue((float)Math.Round((loadedAnim.motionExtraction as CLineMotionExtraction2).duration, 8) ));
                CVariable deltaTimes = animVar("array:2,0,Uint8", "deltaTimes", MotionExtraction2.cr2w);
                CVariable frames = animVar("array:2,0,Float", "frames", MotionExtraction2.cr2w);

                deltaTimes.SetValue((loadedAnim.motionExtraction as CLineMotionExtraction2).deltaTimes);
                MotionExtraction2.data.AddVariable(deltaTimes);
                MotionExtraction2.data.AddVariable(frames);
                MotionExtraction2.data.AddVariable(animVar("Uint8", "flags", MotionExtraction2.cr2w).SetValue((loadedAnim.motionExtraction as CLineMotionExtraction2).flags));
                foreach (var frame in (loadedAnim.motionExtraction as CLineMotionExtraction2).frames)
                {
                    CVariable newvar = animVar("Float", "", MotionExtraction2.cr2w).SetValue(frame);
                    frames.AddVariable(newvar as CFloat);
                }
            }
            
        }

        private CR2WExportWrapper getBitBuff(CAnimationBufferBitwiseCompressed animBuffer, int bufferNumber, string savefileName)
        {
            CR2WExportWrapper bitbuff = W2AnimFile.CreateChunk("CAnimationBufferBitwiseCompressed");
            //bitbuff
            bitbuff.data.AddVariable(animVar("Uint32", "version", bitbuff.cr2w).SetValue((uint)2));
            CVariable bones = animVar("array:129,0,SAnimationBufferBitwiseCompressedBoneTrack", "bones", bitbuff.cr2w);
            bitbuff.data.AddVariable(bones);

            List<Bone> bonelist;
            bonelist = animBuffer.bones;

            foreach (var item in bonelist)
            {
                CVariable newvar = animVar("SAnimationBufferBitwiseCompressedBoneTrack", "", bitbuff.cr2w);
                CVariable position = animVar("SAnimationBufferBitwiseCompressedData", "position", bitbuff.cr2w);
                CVariable orientation = animVar("SAnimationBufferBitwiseCompressedData", "orientation", bitbuff.cr2w);
                CVariable scale = animVar("SAnimationBufferBitwiseCompressedData", "scale", bitbuff.cr2w);
                position.AddVariable(animVar("Float", "dt", bitbuff.cr2w).SetValue( (float)Math.Round(item.position_dt, 8)) );
                position.AddVariable(animVar("Int8", "compression", bitbuff.cr2w).SetValue((sbyte)2));
                position.AddVariable(animVar("Uint16", "numFrames", bitbuff.cr2w).SetValue(item.position_numFrames));
                position.AddVariable(animVar("Uint32", "dataAddr", bitbuff.cr2w));
                position.AddVariable(animVar("Uint32", "dataAddrFallback", bitbuff.cr2w));

                orientation.AddVariable(animVar("Float", "dt", bitbuff.cr2w).SetValue( (float)Math.Round(item.rotation_dt, 8)) );
                orientation.AddVariable(animVar("Int8", "compression", bitbuff.cr2w).SetValue((sbyte)2));
                orientation.AddVariable(animVar("Uint16", "numFrames", bitbuff.cr2w).SetValue(item.rotation_numFrames));
                orientation.AddVariable(animVar("Uint32", "dataAddr", bitbuff.cr2w));
                orientation.AddVariable(animVar("Uint32", "dataAddrFallback", bitbuff.cr2w));

                scale.AddVariable(animVar("Float", "dt", bitbuff.cr2w).SetValue( (float)Math.Round(item.scale_dt, 8)) );
                scale.AddVariable(animVar("Int8", "compression", bitbuff.cr2w).SetValue((sbyte)2));
                scale.AddVariable(animVar("Uint16", "numFrames", bitbuff.cr2w).SetValue(item.scale_numFrames));
                scale.AddVariable(animVar("Uint32", "dataAddr", bitbuff.cr2w));
                scale.AddVariable(animVar("Uint32", "dataAddrFallback", bitbuff.cr2w));

                newvar.AddVariable(position);
                newvar.AddVariable(orientation);
                newvar.AddVariable(scale);
                (bones as CArray).AddVariable(newvar);
            }

            bitbuff.data.AddVariable(animVar("array:129,0,Int8", "data", bitbuff.cr2w));
            bitbuff.data.AddVariable(animVar("array:129,0,Int8", "fallbackData", bitbuff.cr2w));
            //bitbuff.data.AddVariable(animVar("DeferredDataBuffer", "deferredData", bitbuff.cr2w).SetValue(bufferNumber.ToString()));
            bitbuff.data.AddVariable(animVar("DeferredDataBuffer", "deferredData", bitbuff.cr2w).SetValue("0"));
            bitbuff.data.AddVariable(animVar("SAnimationBufferOrientationCompressionMethod", "orientationCompressionMethod", bitbuff.cr2w).SetValue("ABOCM_PackIn48bitsW"));

            bitbuff.data.AddVariable(animVar("Float", "duration", bitbuff.cr2w).SetValue(1F));
            bitbuff.data.AddVariable(animVar("Uint32", "numFrames", bitbuff.cr2w).SetValue((uint)30));

            bitbuff.data.AddVariable(animVar("Float", "dt", bitbuff.cr2w).SetValue( (float)Math.Round(animBuffer.dt, 8)) );

            bitbuff.data.AddVariable(animVar("SAnimationBufferStreamingOption", "streamingOption", bitbuff.cr2w).SetValue("ABSO_NonStreamable"));
            bitbuff.data.AddVariable(animVar("Bool", "hasRefIKBones", bitbuff.cr2w).SetValue(true));


            //TRACKS
            if (animBuffer.tracks != null)
            {
                CArray tracks = (CArray)animVar("array:129,0,SAnimationBufferBitwiseCompressedData", "tracks", bitbuff.cr2w);
                bitbuff.data.AddVariable(tracks);

                foreach (Track track in animBuffer.tracks)
                {
                    CVariable trackData = animVar("SAnimationBufferBitwiseCompressedData", "SAnimationBufferBitwiseCompressedData", bitbuff.cr2w);

                    trackData.AddVariable(animVar("Float", "dt", bitbuff.cr2w).SetValue( (float)Math.Round(track.dt, 8) ));
                    trackData.AddVariable(animVar("Int8", "compression", bitbuff.cr2w).SetValue(track.compression));
                    trackData.AddVariable(animVar("Uint16", "numFrames", bitbuff.cr2w).SetValue(track.numFrames));
                    trackData.AddVariable(animVar("Uint32", "dataAddr", bitbuff.cr2w));
                    trackData.AddVariable(animVar("Uint32", "dataAddrFallback", bitbuff.cr2w));


                    tracks.AddVariable(trackData);
                }
            }
            (bitbuff.GetVariableByName("duration") as CFloat).SetValue((float)Math.Round(animBuffer.duration, 8));
            (bitbuff.GetVariableByName("numFrames") as CUInt32).SetValue(animBuffer.numFrames);

            CByteArray fallbackData = (bitbuff.GetVariableByName("fallbackData") as CByteArray);
            CByteArray dataData = (bitbuff.GetVariableByName("data") as CByteArray);

            byte[] bufferData = getBuffer(bitbuff, animBuffer, "dataAddr");
            byte[] fallback = getBuffer(bitbuff, animBuffer, "dataAddrFallback");

            fallbackData.SetValue(fallback);
            dataData.SetValue(bufferData);
            //saveToFileBuffer(bufferData, savefileName + "." + bufferNumber + ".buffer");
            return bitbuff;
        }

        //private byte[] getTrackBufferuffer(List<CVariable> tracks, List<Track> tracksList, string dataAddrType)
        //{
        //    return bufferData;
        //}

        public void Load(List<string> files, string savefileName)
        {
            byte[] data;
            //data = File.ReadAllBytes(@"D:\w3.modding\animation\template.w2anims"); //need a better way to generate a working blank CR2WFile
            data = new byte[] { 0x43, 0x52, 0x32, 0x57, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x41, 0x7E, 0xB6, 0xDD, 0x97, 0x04, 0x48, 0xC9, 0x12, 0x00, 0x79, 0x1E, 0x00, 0x00, 0x79, 0x1E, 0x00, 0x00, 0x2B, 0xD2, 0xC3, 0x65, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x79, 0x10, 0x00, 0x00, 0xE6, 0xC9, 0xB7, 0x4F, 0x19, 0x11, 0x00, 0x00, 0xBE, 0x00, 0x00, 0x00, 0x97, 0xD3, 0x3A, 0xBD, 0x09, 0x17, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xFB, 0xC3, 0xCA, 0x6D, 0x19, 0x17, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x4B, 0xBB, 0xEC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x17, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0xAF, 0x21, 0x75, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x61, 0x6C, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x53, 0x65, 0x74, 0x00, 0x61, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x32, 0x2C, 0x30, 0x2C, 0x70, 0x74, 0x72, 0x3A, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x61, 0x6C, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x53, 0x65, 0x74, 0x45, 0x6E, 0x74, 0x72, 0x79, 0x00, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x61, 0x6C, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x53, 0x65, 0x74, 0x45, 0x6E, 0x74, 0x72, 0x79, 0x00, 0x61, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x70, 0x74, 0x72, 0x3A, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x61, 0x6C, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x61, 0x6C, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x6E, 0x61, 0x6D, 0x65, 0x00, 0x43, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x63, 0x5F, 0x6D, 0x61, 0x67, 0x65, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x61, 0x6E, 0x69, 0x6D, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x00, 0x70, 0x74, 0x72, 0x3A, 0x49, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x00, 0x43, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x00, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x00, 0x55, 0x69, 0x6E, 0x74, 0x33, 0x32, 0x00, 0x62, 0x6F, 0x6E, 0x65, 0x73, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x31, 0x32, 0x39, 0x2C, 0x30, 0x2C, 0x53, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6F, 0x6E, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x00, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x53, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x00, 0x64, 0x74, 0x00, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x00, 0x63, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x00, 0x49, 0x6E, 0x74, 0x38, 0x00, 0x6E, 0x75, 0x6D, 0x46, 0x72, 0x61, 0x6D, 0x65, 0x73, 0x00, 0x55, 0x69, 0x6E, 0x74, 0x31, 0x36, 0x00, 0x6F, 0x72, 0x69, 0x65, 0x6E, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x64, 0x61, 0x74, 0x61, 0x41, 0x64, 0x64, 0x72, 0x00, 0x64, 0x61, 0x74, 0x61, 0x41, 0x64, 0x64, 0x72, 0x46, 0x61, 0x6C, 0x6C, 0x62, 0x61, 0x63, 0x6B, 0x00, 0x73, 0x63, 0x61, 0x6C, 0x65, 0x00, 0x66, 0x61, 0x6C, 0x6C, 0x62, 0x61, 0x63, 0x6B, 0x44, 0x61, 0x74, 0x61, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x31, 0x32, 0x39, 0x2C, 0x30, 0x2C, 0x49, 0x6E, 0x74, 0x38, 0x00, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x00, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x00, 0x6F, 0x72, 0x69, 0x65, 0x6E, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x43, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x00, 0x53, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4F, 0x72, 0x69, 0x65, 0x6E, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x43, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x00, 0x41, 0x42, 0x4F, 0x43, 0x4D, 0x5F, 0x50, 0x61, 0x63, 0x6B, 0x49, 0x6E, 0x34, 0x38, 0x62, 0x69, 0x74, 0x73, 0x57, 0x00, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x69, 0x6E, 0x67, 0x4F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x53, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x69, 0x6E, 0x67, 0x4F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x41, 0x42, 0x53, 0x4F, 0x5F, 0x46, 0x75, 0x6C, 0x6C, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x61, 0x62, 0x6C, 0x65, 0x00, 0x68, 0x61, 0x73, 0x52, 0x65, 0x66, 0x49, 0x4B, 0x42, 0x6F, 0x6E, 0x65, 0x73, 0x00, 0x42, 0x6F, 0x6F, 0x6C, 0x00, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6F, 0x6E, 0x64, 0x00, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x63, 0x5F, 0x6D, 0x61, 0x67, 0x65, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x53, 0x6F, 0x75, 0x6E, 0x64, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5F, 0x63, 0x6C, 0x6F, 0x74, 0x68, 0x65, 0x73, 0x00, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6D, 0x65, 0x00, 0x61, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x41, 0x6E, 0x73, 0x69, 0x00, 0x6D, 0x61, 0x78, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x00, 0x62, 0x6F, 0x6E, 0x65, 0x00, 0x74, 0x6F, 0x72, 0x73, 0x6F, 0x00, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x54, 0x6F, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x32, 0x2C, 0x30, 0x2C, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x41, 0x6E, 0x73, 0x69, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x46, 0x6F, 0x6F, 0x74, 0x73, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5F, 0x66, 0x6F, 0x6F, 0x74, 0x73, 0x74, 0x65, 0x70, 0x73, 0x00, 0x72, 0x5F, 0x66, 0x6F, 0x6F, 0x74, 0x00, 0x6C, 0x5F, 0x66, 0x6F, 0x6F, 0x74, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x7B, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5F, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x20, 0x2D, 0x20, 0x77, 0x32, 0x61, 0x6E, 0x69, 0x6D, 0x65, 0x76, 0x7D, 0x2E, 0x66, 0x78, 0x00, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x72, 0x68, 0x00, 0x63, 0x5F, 0x6D, 0x61, 0x67, 0x65, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x45, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x45, 0x41, 0x5F, 0x53, 0x74, 0x6F, 0x70, 0x00, 0x63, 0x5F, 0x6D, 0x61, 0x67, 0x65, 0x5F, 0x74, 0x65, 0x6C, 0x65, 0x70, 0x6F, 0x72, 0x74, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x73, 0x65, 0x78, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x41, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x20, 0x62, 0x6F, 0x77, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x66, 0x72, 0x6F, 0x6E, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x5F, 0x31, 0x00, 0x6D, 0x6F, 0x74, 0x69, 0x6F, 0x6E, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x70, 0x74, 0x72, 0x3A, 0x49, 0x4D, 0x6F, 0x74, 0x69, 0x6F, 0x6E, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x43, 0x4C, 0x69, 0x6E, 0x65, 0x4D, 0x6F, 0x74, 0x69, 0x6F, 0x6E, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x32, 0x00, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x73, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x32, 0x2C, 0x30, 0x2C, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x00, 0x64, 0x65, 0x6C, 0x74, 0x61, 0x54, 0x69, 0x6D, 0x65, 0x73, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x32, 0x2C, 0x30, 0x2C, 0x55, 0x69, 0x6E, 0x74, 0x38, 0x00, 0x66, 0x6C, 0x61, 0x67, 0x73, 0x00, 0x55, 0x69, 0x6E, 0x74, 0x38, 0x00, 0x41, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x20, 0x62, 0x6F, 0x77, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x66, 0x72, 0x6F, 0x6E, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x5F, 0x32, 0x00, 0x42, 0x6C, 0x61, 0x6E, 0x6B, 0x61, 0x20, 0x69, 0x6E, 0x6A, 0x75, 0x72, 0x65, 0x64, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x20, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x29, 0x20, 0x74, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x69, 0x72, 0x2C, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x53, 0x6F, 0x72, 0x63, 0x65, 0x72, 0x65, 0x73, 0x73, 0x20, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x20, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x20, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x53, 0x6F, 0x72, 0x63, 0x65, 0x72, 0x65, 0x73, 0x73, 0x20, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x20, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x20, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x53, 0x6F, 0x72, 0x63, 0x65, 0x72, 0x65, 0x73, 0x73, 0x20, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x20, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x20, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x63, 0x6F, 0x6E, 0x63, 0x69, 0x6F, 0x75, 0x73, 0x2C, 0x20, 0x64, 0x69, 0x7A, 0x7A, 0x79, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x63, 0x6F, 0x6E, 0x63, 0x69, 0x6F, 0x75, 0x73, 0x2C, 0x20, 0x64, 0x69, 0x7A, 0x7A, 0x79, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x63, 0x6F, 0x6E, 0x63, 0x69, 0x6F, 0x75, 0x73, 0x2C, 0x20, 0x64, 0x69, 0x7A, 0x7A, 0x79, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x74, 0x20, 0x66, 0x75, 0x6E, 0x65, 0x72, 0x61, 0x6C, 0x20, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6C, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x74, 0x20, 0x66, 0x75, 0x6E, 0x65, 0x72, 0x61, 0x6C, 0x20, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6C, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x74, 0x20, 0x66, 0x75, 0x6E, 0x65, 0x72, 0x61, 0x6C, 0x20, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6C, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x68, 0x79, 0x70, 0x6E, 0x6F, 0x74, 0x69, 0x7A, 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6F, 0x6E, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x68, 0x79, 0x70, 0x6E, 0x6F, 0x74, 0x69, 0x7A, 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6F, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x68, 0x79, 0x70, 0x6E, 0x6F, 0x74, 0x69, 0x7A, 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6F, 0x6E, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x75, 0x6E, 0x63, 0x6F, 0x6E, 0x63, 0x69, 0x6F, 0x75, 0x73, 0x20, 0x6F, 0x6E, 0x20, 0x66, 0x6C, 0x6F, 0x6F, 0x72, 0x00, 0x57, 0x6F, 0x6D, 0x65, 0x6E, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x20, 0x73, 0x61, 0x75, 0x6E, 0x61, 0x5F, 0x31, 0x00, 0x57, 0x6F, 0x6D, 0x65, 0x6E, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x20, 0x73, 0x61, 0x75, 0x6E, 0x61, 0x5F, 0x32, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x31, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x31, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x31, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x32, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5F, 0x63, 0x6C, 0x61, 0x70, 0x00, 0x6C, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x32, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x32, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x33, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x33, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x33, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x62, 0x6C, 0x69, 0x6E, 0x64, 0x5F, 0x66, 0x69, 0x6C, 0x69, 0x70, 0x70, 0x61, 0x5F, 0x63, 0x6F, 0x6D, 0x62, 0x61, 0x74, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x62, 0x6C, 0x69, 0x6E, 0x64, 0x5F, 0x66, 0x69, 0x6C, 0x69, 0x70, 0x70, 0x61, 0x5F, 0x63, 0x6F, 0x6D, 0x62, 0x61, 0x74, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x62, 0x6C, 0x69, 0x6E, 0x64, 0x5F, 0x66, 0x69, 0x6C, 0x69, 0x70, 0x70, 0x61, 0x5F, 0x63, 0x6F, 0x6D, 0x62, 0x61, 0x74, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x71, 0x34, 0x30, 0x33, 0x5F, 0x79, 0x65, 0x6E, 0x6E, 0x65, 0x66, 0x65, 0x72, 0x5F, 0x63, 0x68, 0x61, 0x6E, 0x74, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x77, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x63, 0x75, 0x66, 0x66, 0x65, 0x64, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x77, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x63, 0x75, 0x66, 0x66, 0x65, 0x64, 0x5F, 0x6C, 0x65, 0x66, 0x74, 0x5F, 0x74, 0x75, 0x72, 0x6E, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x77, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x63, 0x75, 0x66, 0x66, 0x65, 0x64, 0x5F, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5F, 0x74, 0x75, 0x72, 0x6E, 0x00, 0x71, 0x32, 0x30, 0x33, 0x5F, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6B, 0x65, 0x64, 0x5F, 0x62, 0x79, 0x5F, 0x77, 0x69, 0x6C, 0x64, 0x20, 0x68, 0x75, 0x6E, 0x74, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x49, 0x74, 0x65, 0x6D, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x69, 0x74, 0x65, 0x6D, 0x5F, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6F, 0x72, 0x79, 0x00, 0x73, 0x74, 0x65, 0x65, 0x6C, 0x73, 0x77, 0x6F, 0x72, 0x64, 0x00, 0x69, 0x74, 0x65, 0x6D, 0x4E, 0x61, 0x6D, 0x65, 0x5F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C, 0x00, 0x71, 0x32, 0x30, 0x33, 0x20, 0x47, 0x68, 0x6F, 0x73, 0x74, 0x20, 0x48, 0x75, 0x6D, 0x61, 0x6E, 0x20, 0x53, 0x77, 0x6F, 0x72, 0x64, 0x00, 0x45, 0x49, 0x74, 0x65, 0x6D, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x49, 0x41, 0x5F, 0x4D, 0x6F, 0x75, 0x6E, 0x74, 0x54, 0x6F, 0x52, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x6E, 0x64, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x4D, 0x6F, 0x6E, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6C, 0x75, 0x65, 0x41, 0x6E, 0x69, 0x6D, 0x53, 0x74, 0x61, 0x72, 0x74, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x49, 0x74, 0x65, 0x6D, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x67, 0x68, 0x6F, 0x73, 0x74, 0x00, 0x45, 0x49, 0x74, 0x65, 0x6D, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x49, 0x45, 0x41, 0x5F, 0x53, 0x74, 0x6F, 0x70, 0x00, 0x4D, 0x6F, 0x6E, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6C, 0x75, 0x65, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x6E, 0x64, 0x00, 0x71, 0x32, 0x30, 0x33, 0x5F, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x73, 0x6F, 0x75, 0x72, 0x61, 0x6E, 0x64, 0x65, 0x64, 0x00, 0x71, 0x32, 0x30, 0x31, 0x5F, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x72, 0x75, 0x6E, 0x6B, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x31, 0x00, 0x71, 0x32, 0x30, 0x31, 0x5F, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x72, 0x75, 0x6E, 0x6B, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x32, 0x00, 0x71, 0x32, 0x30, 0x31, 0x5F, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x72, 0x75, 0x6E, 0x6B, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x33, 0x00, 0x71, 0x32, 0x30, 0x31, 0x5F, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x72, 0x75, 0x6E, 0x6B, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x71, 0x32, 0x30, 0x31, 0x5F, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x72, 0x75, 0x6E, 0x6B, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x77, 0x6F, 0x72, 0x6B, 0x5F, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x65, 0x69, 0x6E, 0x67, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x77, 0x6F, 0x72, 0x6B, 0x5F, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x65, 0x69, 0x6E, 0x67, 0x5F, 0x30, 0x32, 0x00, 0x71, 0x32, 0x30, 0x33, 0x5F, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x00, 0x6D, 0x61, 0x72, 0x67, 0x65, 0x72, 0x69, 0x74, 0x61, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x31, 0x00, 0x6D, 0x61, 0x72, 0x67, 0x65, 0x72, 0x69, 0x74, 0x61, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x65, 0x6E, 0x64, 0x00, 0x6D, 0x61, 0x72, 0x67, 0x65, 0x72, 0x69, 0x74, 0x61, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x74, 0x72, 0x69, 0x73, 0x73, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x65, 0x6E, 0x64, 0x00, 0x74, 0x72, 0x69, 0x73, 0x73, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x31, 0x00, 0x74, 0x72, 0x69, 0x73, 0x73, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x79, 0x65, 0x6E, 0x6E, 0x65, 0x66, 0x65, 0x72, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x65, 0x6E, 0x64, 0x00, 0x79, 0x65, 0x6E, 0x6E, 0x65, 0x66, 0x65, 0x72, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x31, 0x00, 0x79, 0x65, 0x6E, 0x6E, 0x65, 0x66, 0x65, 0x72, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5F, 0x6C, 0x6F, 0x77, 0x5F, 0x6C, 0x79, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x6F, 0x77, 0x6E, 0x5F, 0x64, 0x65, 0x76, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5F, 0x69, 0x64, 0x6C, 0x65, 0x00, 0x71, 0x34, 0x30, 0x33, 0x5F, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x74, 0x75, 0x72, 0x6E, 0x5F, 0x77, 0x68, 0x65, 0x65, 0x6C, 0x00, 0x67, 0x65, 0x72, 0x61, 0x6C, 0x74, 0x5F, 0x62, 0x65, 0x69, 0x6E, 0x67, 0x5F, 0x70, 0x75, 0x6C, 0x6C, 0x65, 0x64, 0x5F, 0x65, 0x6E, 0x64, 0x00, 0x67, 0x65, 0x72, 0x61, 0x6C, 0x74, 0x5F, 0x62, 0x65, 0x69, 0x6E, 0x67, 0x5F, 0x70, 0x75, 0x6C, 0x6C, 0x65, 0x64, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x67, 0x65, 0x72, 0x61, 0x6C, 0x74, 0x5F, 0x62, 0x65, 0x69, 0x6E, 0x67, 0x5F, 0x70, 0x75, 0x6C, 0x6C, 0x65, 0x64, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x64, 0x72, 0x69, 0x6E, 0x6B, 0x73, 0x5F, 0x76, 0x6F, 0x64, 0x6B, 0x61, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5F, 0x64, 0x72, 0x69, 0x6E, 0x6B, 0x00, 0x72, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x00, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5F, 0x69, 0x74, 0x65, 0x6D, 0x00, 0x68, 0x65, 0x61, 0x64, 0x00, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x5F, 0x69, 0x74, 0x65, 0x6D, 0x00, 0x73, 0x6F, 0x72, 0x63, 0x65, 0x72, 0x65, 0x73, 0x73, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x73, 0x6F, 0x72, 0x63, 0x65, 0x72, 0x65, 0x73, 0x73, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x73, 0x6F, 0x72, 0x63, 0x65, 0x72, 0x65, 0x73, 0x73, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x71, 0x31, 0x30, 0x33, 0x5F, 0x6D, 0x61, 0x6E, 0x5F, 0x67, 0x65, 0x72, 0x61, 0x6C, 0x74, 0x5F, 0x67, 0x75, 0x73, 0x6C, 0x61, 0x72, 0x5F, 0x62, 0x65, 0x6C, 0x6C, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5F, 0x62, 0x65, 0x6C, 0x6C, 0x00, 0x71, 0x34, 0x30, 0x33, 0x5F, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x6D, 0x65, 0x74, 0x65, 0x6F, 0x72, 0x00, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x74, 0x65, 0x6D, 0x4C, 0x00, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6D, 0x4C, 0x00, 0x48, 0x69, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6D, 0x4C, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x64, 0x72, 0x69, 0x6E, 0x6B, 0x69, 0x6E, 0x67, 0x20, 0x67, 0x72, 0x61, 0x66, 0x65, 0x63, 0x75, 0x6C, 0x6C, 0x79, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x64, 0x72, 0x69, 0x6E, 0x6B, 0x69, 0x6E, 0x67, 0x20, 0x67, 0x72, 0x61, 0x66, 0x65, 0x63, 0x75, 0x6C, 0x6C, 0x79, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x64, 0x72, 0x69, 0x6E, 0x6B, 0x69, 0x6E, 0x67, 0x20, 0x67, 0x72, 0x61, 0x66, 0x65, 0x63, 0x75, 0x6C, 0x6C, 0x79, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x69, 0x64, 0x6C, 0x65, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x63, 0x75, 0x66, 0x66, 0x65, 0x64, 0x00, 0x41, 0x42, 0x4F, 0x43, 0x4D, 0x5F, 0x41, 0x73, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x5F, 0x58, 0x59, 0x5A, 0x53, 0x69, 0x67, 0x6E, 0x65, 0x64, 0x57, 0x49, 0x6E, 0x4C, 0x61, 0x73, 0x74, 0x42, 0x69, 0x74, 0x00, 0x73, 0x71, 0x32, 0x30, 0x32, 0x5F, 0x79, 0x65, 0x6E, 0x6E, 0x65, 0x66, 0x65, 0x72, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x00, 0x65, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x73, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x32, 0x2C, 0x30, 0x2C, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x3A, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x73, 0x46, 0x69, 0x6C, 0x65, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x73, 0x46, 0x69, 0x6C, 0x65, 0x00, 0x73, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x6F, 0x6E, 0x00, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x3A, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x6F, 0x6E, 0x00, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x6F, 0x6E, 0x00, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x69, 0x6E, 0x67, 0x20, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x64, 0x61, 0x6E, 0x63, 0x65, 0x00, 0x41, 0x42, 0x53, 0x4F, 0x5F, 0x4E, 0x6F, 0x6E, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x61, 0x62, 0x6C, 0x65, 0x00, 0x64, 0x61, 0x74, 0x61, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5C, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x5C, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5C, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5C, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5F, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x2E, 0x77, 0x32, 0x61, 0x6E, 0x69, 0x6D, 0x65, 0x76, 0x00, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x5C, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x65, 0x6E, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5C, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x62, 0x61, 0x73, 0x65, 0x5C, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x62, 0x61, 0x73, 0x65, 0x2E, 0x77, 0x32, 0x72, 0x69, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD1, 0x55, 0x2C, 0xC1, 0x17, 0x00, 0x00, 0x00, 0xDE, 0x9C, 0x8C, 0x69, 0x22, 0x00, 0x00, 0x00, 0x6A, 0x5A, 0x04, 0x83, 0x4B, 0x00, 0x00, 0x00, 0xCF, 0x77, 0xEF, 0x80, 0x66, 0x00, 0x00, 0x00, 0x67, 0x3C, 0x16, 0xFE, 0x70, 0x00, 0x00, 0x00, 0x83, 0xBD, 0xF4, 0x9E, 0x87, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x68, 0xB9, 0x9A, 0x00, 0x00, 0x00, 0x12, 0xF1, 0xE5, 0x37, 0x9F, 0x00, 0x00, 0x00, 0xDB, 0x5B, 0x10, 0xF1, 0xA5, 0x00, 0x00, 0x00, 0xF0, 0xF3, 0x70, 0x92, 0xB6, 0x00, 0x00, 0x00, 0xDE, 0x8E, 0x1C, 0x09, 0xC1, 0x00, 0x00, 0x00, 0xE8, 0x95, 0xB7, 0xBA, 0xD6, 0x00, 0x00, 0x00, 0xF4, 0x16, 0xA8, 0x83, 0xF8, 0x00, 0x00, 0x00, 0xB5, 0xD7, 0xF5, 0x7B, 0x00, 0x01, 0x00, 0x00, 0x64, 0x6D, 0x59, 0x16, 0x07, 0x01, 0x00, 0x00, 0x5C, 0xC8, 0x16, 0x46, 0x0D, 0x01, 0x00, 0x00, 0xB2, 0xD2, 0x4A, 0x67, 0x44, 0x01, 0x00, 0x00, 0xBE, 0xD9, 0xD7, 0xEF, 0x4D, 0x01, 0x00, 0x00, 0x3C, 0x8E, 0xD6, 0xB9, 0x73, 0x01, 0x00, 0x00, 0xDF, 0x1C, 0x34, 0x69, 0x76, 0x01, 0x00, 0x00, 0x3F, 0x80, 0xAD, 0x94, 0x7C, 0x01, 0x00, 0x00, 0xAF, 0x56, 0x47, 0x9D, 0x88, 0x01, 0x00, 0x00, 0x36, 0x4A, 0x89, 0xC9, 0x8D, 0x01, 0x00, 0x00, 0x03, 0x0E, 0x91, 0x87, 0x97, 0x01, 0x00, 0x00, 0x56, 0x74, 0x3E, 0x49, 0x9E, 0x01, 0x00, 0x00, 0xF3, 0x27, 0xC7, 0xAD, 0xAA, 0x01, 0x00, 0x00, 0xB6, 0x11, 0x2E, 0x04, 0xB3, 0x01, 0x00, 0x00, 0x10, 0xD5, 0x65, 0x25, 0xC4, 0x01, 0x00, 0x00, 0xE3, 0xC5, 0xE1, 0x04, 0xCA, 0x01, 0x00, 0x00, 0xB9, 0x0D, 0x62, 0x32, 0xD7, 0x01, 0x00, 0x00, 0xEF, 0xF9, 0xAC, 0x2C, 0xE8, 0x01, 0x00, 0x00, 0x4E, 0x35, 0xA2, 0xB7, 0xF5, 0x01, 0x00, 0x00, 0x8C, 0xA0, 0x90, 0x41, 0x08, 0x02, 0x00, 0x00, 0x1C, 0x90, 0xF5, 0xA5, 0x25, 0x02, 0x00, 0x00, 0xE1, 0x92, 0x9C, 0x55, 0x52, 0x02, 0x00, 0x00, 0x7D, 0xBB, 0x77, 0xA4, 0x66, 0x02, 0x00, 0x00, 0x02, 0x2B, 0x20, 0x0D, 0x76, 0x02, 0x00, 0x00, 0x09, 0xF2, 0x6D, 0xCA, 0x96, 0x02, 0x00, 0x00, 0x3D, 0x15, 0x90, 0x71, 0xAB, 0x02, 0x00, 0x00, 0xA9, 0x33, 0x93, 0x11, 0xB9, 0x02, 0x00, 0x00, 0x67, 0xD6, 0xE1, 0x10, 0xBE, 0x02, 0x00, 0x00, 0x5E, 0xE0, 0xCC, 0x45, 0xCE, 0x02, 0x00, 0x00, 0x77, 0x5B, 0x6E, 0x07, 0xD7, 0x02, 0x00, 0x00, 0xBE, 0x0C, 0xE2, 0xC5, 0xE9, 0x02, 0x00, 0x00, 0x8B, 0x63, 0xAA, 0x68, 0xFC, 0x02, 0x00, 0x00, 0xF4, 0x40, 0xDD, 0xD7, 0x06, 0x03, 0x00, 0x00, 0xAA, 0x25, 0x7A, 0xC1, 0x15, 0x03, 0x00, 0x00, 0x0A, 0xAD, 0x65, 0xC5, 0x1F, 0x03, 0x00, 0x00, 0x5A, 0xC3, 0xFE, 0xF8, 0x2D, 0x03, 0x00, 0x00, 0x25, 0x6E, 0xD2, 0x51, 0x3C, 0x03, 0x00, 0x00, 0x45, 0x91, 0x58, 0x83, 0x47, 0x03, 0x00, 0x00, 0xA2, 0xCF, 0x07, 0x4E, 0x53, 0x03, 0x00, 0x00, 0x1D, 0x14, 0x13, 0x34, 0x58, 0x03, 0x00, 0x00, 0x8C, 0x3D, 0xF7, 0x70, 0x5E, 0x03, 0x00, 0x00, 0xF7, 0x81, 0x39, 0x79, 0x6F, 0x03, 0x00, 0x00, 0x6C, 0x1B, 0x8D, 0xAD, 0x84, 0x03, 0x00, 0x00, 0x52, 0xBC, 0xB7, 0x15, 0x9A, 0x03, 0x00, 0x00, 0x67, 0x38, 0x36, 0x45, 0xAB, 0x03, 0x00, 0x00, 0x5A, 0x05, 0x0D, 0x97, 0xB2, 0x03, 0x00, 0x00, 0x80, 0x8A, 0x61, 0xDC, 0xB9, 0x03, 0x00, 0x00, 0xC5, 0x96, 0x94, 0x4F, 0xCD, 0x03, 0x00, 0x00, 0xCF, 0xC4, 0xC0, 0x3D, 0xF0, 0x03, 0x00, 0x00, 0xBD, 0x81, 0x6B, 0x91, 0xFB, 0x03, 0x00, 0x00, 0x22, 0x17, 0xCB, 0x4A, 0x0C, 0x04, 0x00, 0x00, 0x1E, 0x65, 0xBB, 0x4E, 0x1D, 0x04, 0x00, 0x00, 0x6D, 0xFB, 0xB5, 0x28, 0x24, 0x04, 0x00, 0x00, 0x42, 0x39, 0xDE, 0x48, 0x36, 0x04, 0x00, 0x00, 0x44, 0x82, 0xAE, 0x12, 0x3E, 0x04, 0x00, 0x00, 0xB7, 0x4B, 0x05, 0xEC, 0x4E, 0x04, 0x00, 0x00, 0x9F, 0xFC, 0xE2, 0x96, 0x5D, 0x04, 0x00, 0x00, 0xE2, 0x77, 0x80, 0x64, 0x82, 0x04, 0x00, 0x00, 0x16, 0xAD, 0x6D, 0xAD, 0x93, 0x04, 0x00, 0x00, 0xA9, 0x7E, 0xF1, 0x60, 0xA9, 0x04, 0x00, 0x00, 0x89, 0x3C, 0x39, 0xC8, 0xC0, 0x04, 0x00, 0x00, 0x5D, 0x32, 0x32, 0xA2, 0xC7, 0x04, 0x00, 0x00, 0xB4, 0x62, 0x95, 0x8F, 0xD7, 0x04, 0x00, 0x00, 0xC3, 0x4A, 0x5F, 0xA1, 0xE2, 0x04, 0x00, 0x00, 0xE2, 0xAB, 0x95, 0x91, 0xF2, 0x04, 0x00, 0x00, 0x44, 0x53, 0xE5, 0x62, 0xF8, 0x04, 0x00, 0x00, 0x21, 0x73, 0x35, 0xE2, 0xFE, 0x04, 0x00, 0x00, 0x79, 0xFD, 0x7D, 0x3E, 0x23, 0x05, 0x00, 0x00, 0x9F, 0x70, 0x1F, 0x51, 0x32, 0x05, 0x00, 0x00, 0x6C, 0x70, 0x04, 0x9A, 0x58, 0x05, 0x00, 0x00, 0x0B, 0x5A, 0x08, 0x85, 0x7F, 0x05, 0x00, 0x00, 0x6B, 0x14, 0x0E, 0xA4, 0xA7, 0x05, 0x00, 0x00, 0xD9, 0x10, 0x94, 0x83, 0xCE, 0x05, 0x00, 0x00, 0xD3, 0x59, 0xB4, 0xD6, 0xF3, 0x05, 0x00, 0x00, 0x33, 0xBA, 0xC6, 0x66, 0x19, 0x06, 0x00, 0x00, 0xC1, 0x27, 0xA1, 0xF3, 0x3E, 0x06, 0x00, 0x00, 0x23, 0xAE, 0xB4, 0x42, 0x67, 0x06, 0x00, 0x00, 0x83, 0x76, 0x8E, 0x6E, 0x91, 0x06, 0x00, 0x00, 0x51, 0x03, 0x56, 0x68, 0xBA, 0x06, 0x00, 0x00, 0x61, 0x46, 0xD7, 0x49, 0xD7, 0x06, 0x00, 0x00, 0x7D, 0xC9, 0x56, 0xED, 0xF5, 0x06, 0x00, 0x00, 0xAF, 0xBC, 0x77, 0x20, 0x12, 0x07, 0x00, 0x00, 0x9E, 0x93, 0x1C, 0x77, 0x38, 0x07, 0x00, 0x00, 0x28, 0x8D, 0xDD, 0x67, 0x5F, 0x07, 0x00, 0x00, 0xD4, 0x60, 0xCD, 0x7C, 0x85, 0x07, 0x00, 0x00, 0xB8, 0xF3, 0x59, 0x08, 0x9F, 0x07, 0x00, 0x00, 0x97, 0x5C, 0xB6, 0x6C, 0xBA, 0x07, 0x00, 0x00, 0x5C, 0xED, 0xAE, 0xFA, 0xD5, 0x07, 0x00, 0x00, 0x5C, 0x6B, 0xD8, 0xAE, 0xF6, 0x07, 0x00, 0x00, 0xBA, 0xC0, 0x03, 0x67, 0x18, 0x08, 0x00, 0x00, 0x52, 0x40, 0x21, 0x3A, 0x39, 0x08, 0x00, 0x00, 0x65, 0xE6, 0x56, 0x03, 0x5A, 0x08, 0x00, 0x00, 0xB0, 0xA6, 0x93, 0xEA, 0x66, 0x08, 0x00, 0x00, 0x67, 0x43, 0x5E, 0xB6, 0x6D, 0x08, 0x00, 0x00, 0xF1, 0x1B, 0x2D, 0x36, 0x8F, 0x08, 0x00, 0x00, 0x1B, 0x19, 0xF5, 0xEB, 0xB0, 0x08, 0x00, 0x00, 0x5A, 0xBF, 0xDA, 0xBA, 0xD1, 0x08, 0x00, 0x00, 0x34, 0x68, 0xA1, 0x25, 0xF3, 0x08, 0x00, 0x00, 0x48, 0x20, 0x4C, 0x81, 0x14, 0x09, 0x00, 0x00, 0x5E, 0xB3, 0xA1, 0x16, 0x2E, 0x09, 0x00, 0x00, 0xE8, 0x16, 0x79, 0xEC, 0x49, 0x09, 0x00, 0x00, 0x94, 0xFA, 0x0B, 0x4B, 0x63, 0x09, 0x00, 0x00, 0xEC, 0x2A, 0xB6, 0x14, 0x80, 0x09, 0x00, 0x00, 0xCE, 0xEC, 0xCA, 0x06, 0x99, 0x09, 0x00, 0x00, 0xC0, 0xD8, 0x78, 0x2A, 0xBC, 0x09, 0x00, 0x00, 0xF9, 0x8D, 0x2B, 0xB1, 0xE0, 0x09, 0x00, 0x00, 0xAD, 0xA5, 0x69, 0x6B, 0x00, 0x0A, 0x00, 0x00, 0x6B, 0x95, 0x31, 0x94, 0x12, 0x0A, 0x00, 0x00, 0xEB, 0x8C, 0x36, 0x45, 0x1D, 0x0A, 0x00, 0x00, 0xE3, 0x97, 0x65, 0x98, 0x26, 0x0A, 0x00, 0x00, 0xF7, 0x74, 0xAC, 0x2B, 0x31, 0x0A, 0x00, 0x00, 0x4A, 0xCB, 0xA3, 0x69, 0x43, 0x0A, 0x00, 0x00, 0xE8, 0x52, 0x8F, 0xB2, 0x5A, 0x0A, 0x00, 0x00, 0x4F, 0x9E, 0xE8, 0xCE, 0x66, 0x0A, 0x00, 0x00, 0x31, 0x93, 0x2D, 0x24, 0x7A, 0x0A, 0x00, 0x00, 0x34, 0xDA, 0xB3, 0x36, 0x88, 0x0A, 0x00, 0x00, 0x49, 0x08, 0x29, 0xCD, 0x9D, 0x0A, 0x00, 0x00, 0xFE, 0x70, 0xA4, 0x56, 0xB5, 0x0A, 0x00, 0x00, 0x70, 0x00, 0xC6, 0x1C, 0xBB, 0x0A, 0x00, 0x00, 0xF8, 0x0B, 0x1B, 0x4D, 0xCD, 0x0A, 0x00, 0x00, 0x59, 0x69, 0x25, 0xD8, 0xD6, 0x0A, 0x00, 0x00, 0x92, 0xE2, 0x48, 0xB7, 0xE9, 0x0A, 0x00, 0x00, 0xAB, 0xA1, 0xAA, 0x33, 0xFD, 0x0A, 0x00, 0x00, 0xE1, 0x0C, 0x1C, 0xBE, 0x1F, 0x0B, 0x00, 0x00, 0x4A, 0x87, 0x1E, 0xE4, 0x41, 0x0B, 0x00, 0x00, 0xB3, 0x01, 0x21, 0x0A, 0x63, 0x0B, 0x00, 0x00, 0x71, 0xC8, 0x83, 0x89, 0x83, 0x0B, 0x00, 0x00, 0x9B, 0x8A, 0x41, 0x05, 0xA2, 0x0B, 0x00, 0x00, 0x48, 0x2D, 0xB1, 0xE4, 0xB9, 0x0B, 0x00, 0x00, 0xE5, 0x32, 0x76, 0xD8, 0xD3, 0x0B, 0x00, 0x00, 0x33, 0xEF, 0x70, 0xE3, 0xE4, 0x0B, 0x00, 0x00, 0xDB, 0x78, 0x46, 0x0E, 0x06, 0x0C, 0x00, 0x00, 0x5C, 0x10, 0xC7, 0xD0, 0x24, 0x0C, 0x00, 0x00, 0x37, 0xE5, 0xB5, 0x68, 0x44, 0x0C, 0x00, 0x00, 0xCB, 0x77, 0x09, 0xBB, 0x5E, 0x0C, 0x00, 0x00, 0x9C, 0xF8, 0x00, 0x68, 0x7C, 0x0C, 0x00, 0x00, 0xE8, 0x32, 0x20, 0x3E, 0x98, 0x0C, 0x00, 0x00, 0x7E, 0x1C, 0x9A, 0xCD, 0xB5, 0x0C, 0x00, 0x00, 0xDD, 0x82, 0xF5, 0x9E, 0xD6, 0x0C, 0x00, 0x00, 0xED, 0x48, 0xA7, 0x3E, 0xF5, 0x0C, 0x00, 0x00, 0xCC, 0x4A, 0x67, 0x38, 0x1A, 0x0D, 0x00, 0x00, 0x3D, 0x0C, 0xCF, 0xEF, 0x2F, 0x0D, 0x00, 0x00, 0xB7, 0x08, 0x32, 0x99, 0x47, 0x0D, 0x00, 0x00, 0x62, 0xAD, 0x10, 0xAC, 0x60, 0x0D, 0x00, 0x00, 0x9C, 0xD1, 0xEE, 0x8F, 0x7A, 0x0D, 0x00, 0x00, 0x54, 0x2B, 0x32, 0xC4, 0x8C, 0x0D, 0x00, 0x00, 0xD0, 0x61, 0xAA, 0x5F, 0x99, 0x0D, 0x00, 0x00, 0xB9, 0x77, 0xFF, 0x5C, 0xA0, 0x0D, 0x00, 0x00, 0xEE, 0x4C, 0x0A, 0x48, 0xAC, 0x0D, 0x00, 0x00, 0xF9, 0x43, 0xC2, 0x1E, 0xB1, 0x0D, 0x00, 0x00, 0x70, 0x08, 0xA5, 0xAB, 0xBD, 0x0D, 0x00, 0x00, 0x47, 0x8A, 0x8C, 0xA7, 0xE0, 0x0D, 0x00, 0x00, 0x87, 0x7A, 0x10, 0xDD, 0x04, 0x0E, 0x00, 0x00, 0xFD, 0xAF, 0x9F, 0xD1, 0x27, 0x0E, 0x00, 0x00, 0x40, 0x70, 0xD7, 0x6D, 0x43, 0x0E, 0x00, 0x00, 0x49, 0x91, 0x65, 0x7D, 0x4F, 0x0E, 0x00, 0x00, 0x60, 0x2A, 0x42, 0x64, 0x60, 0x0E, 0x00, 0x00, 0x18, 0x02, 0x3D, 0xF7, 0x6B, 0x0E, 0x00, 0x00, 0xBF, 0x0D, 0x2D, 0x02, 0x74, 0x0E, 0x00, 0x00, 0x32, 0x62, 0x83, 0x46, 0x7E, 0x0E, 0x00, 0x00, 0x93, 0x8C, 0xAC, 0x27, 0xB1, 0x0E, 0x00, 0x00, 0xF3, 0x95, 0x03, 0x46, 0xE5, 0x0E, 0x00, 0x00, 0x81, 0xD4, 0x52, 0x73, 0x18, 0x0F, 0x00, 0x00, 0x43, 0xE5, 0x8D, 0x7C, 0x2E, 0x0F, 0x00, 0x00, 0xCD, 0xAD, 0x07, 0x95, 0x50, 0x0F, 0x00, 0x00, 0xF3, 0x48, 0x2F, 0xF1, 0x6D, 0x0F, 0x00, 0x00, 0x80, 0xE6, 0x26, 0x71, 0x7B, 0x0F, 0x00, 0x00, 0x10, 0xB5, 0x1D, 0x16, 0x9F, 0x0F, 0x00, 0x00, 0x41, 0xE5, 0xF2, 0xAE, 0xB2, 0x0F, 0x00, 0x00, 0x2A, 0x62, 0x92, 0x89, 0xBB, 0x0F, 0x00, 0x00, 0x5D, 0x8D, 0x76, 0xBF, 0xCC, 0x0F, 0x00, 0x00, 0xA3, 0x3D, 0x4F, 0x72, 0xD6, 0x0F, 0x00, 0x00, 0x70, 0x1A, 0x6C, 0x2B, 0xE7, 0x0F, 0x00, 0x00, 0x8C, 0x0B, 0x1E, 0x8E, 0xF2, 0x0F, 0x00, 0x00, 0x98, 0x39, 0x79, 0x28, 0x05, 0x10, 0x00, 0x00, 0xBF, 0xC9, 0xDA, 0x61, 0x0A, 0x10, 0x00, 0x00, 0xB6, 0x00, 0x00, 0x00, 0x44, 0x10, 0x00, 0x00, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x0B, 0x00, 0x00, 0x7C, 0x0B, 0x00, 0x00, 0x3E, 0xE3, 0x22, 0x21, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x33, 0x00, 0x00, 0xCC, 0x33, 0x00, 0x00, 0xD9, 0xE9, 0xA6, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA2, 0x21, 0x00, 0x00, 0xA2, 0x21, 0x00, 0x00, 0x9A, 0xAF, 0x2F, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x55, 0x00, 0x00, 0x38, 0x55, 0x00, 0x00, 0xA0, 0x5C, 0xF4, 0xB6, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x22, 0x00, 0x00, 0xCE, 0x22, 0x00, 0x00, 0x48, 0xEA, 0x2F, 0x6A, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC3, 0x00, 0x00, 0xC6, 0xC3, 0x00, 0x00, 0x3D, 0x28, 0x98, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x86, 0x00, 0x00, 0x5E, 0x86, 0x00, 0x00, 0x72, 0x56, 0xC7, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x32, 0x00, 0x00, 0xFA, 0x32, 0x00, 0x00, 0xCB, 0xD6, 0xDF, 0x48, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xCB, 0x00, 0x00, 0x7C, 0xCB, 0x00, 0x00, 0x2F, 0x13, 0x2E, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDA, 0xBB, 0x00, 0x00, 0xDA, 0xBB, 0x00, 0x00, 0xFE, 0xC3, 0xF2, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x38, 0x00, 0x00, 0xEE, 0x38, 0x00, 0x00, 0xC1, 0x2A, 0x27, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x72, 0x00, 0x00, 0x18, 0x72, 0x00, 0x00, 0x38, 0xA2, 0x02, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF2, 0x76, 0x00, 0x00, 0xF2, 0x76, 0x00, 0x00, 0xF4, 0xF3, 0x0B, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x54, 0x00, 0x00, 0xE4, 0x54, 0x00, 0x00, 0xBE, 0xFA, 0x6D, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x5F, 0x00, 0x00, 0x94, 0x5F, 0x00, 0x00, 0xB5, 0x12, 0xD9, 0x72, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x63, 0x00, 0x00, 0x84, 0x63, 0x00, 0x00, 0x5A, 0x7F, 0x13, 0x19, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x96, 0x01, 0x00, 0x68, 0x96, 0x01, 0x00, 0xAA, 0x01, 0x2A, 0xE6, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xD2, 0x00, 0x00, 0xC6, 0xD2, 0x00, 0x00, 0xC5, 0x06, 0x44, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x15, 0x01, 0x00, 0x56, 0x15, 0x01, 0x00, 0xEC, 0x7C, 0x90, 0x9D, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x49, 0x00, 0x00, 0x2C, 0x49, 0x00, 0x00, 0x4D, 0x5A, 0xF2, 0x57, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDE, 0x4B, 0x00, 0x00, 0xDE, 0x4B, 0x00, 0x00, 0x91, 0xB9, 0x70, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0xA6, 0x00, 0x00, 0x14, 0xA6, 0x00, 0x00, 0x62, 0x09, 0xCE, 0x60, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x45, 0x00, 0x00, 0x06, 0x45, 0x00, 0x00, 0xDD, 0xC0, 0xBF, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x6D, 0x74, 0x97, 0x12, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x57, 0x00, 0x00, 0x24, 0x57, 0x00, 0x00, 0x1E, 0x3F, 0x28, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x1B, 0x00, 0x00, 0x30, 0x1B, 0x00, 0x00, 0xD3, 0x3F, 0xCF, 0x86, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x50, 0x00, 0x00, 0x94, 0x50, 0x00, 0x00, 0x17, 0x1E, 0x4E, 0x25, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x4A, 0x00, 0x00, 0x8E, 0x4A, 0x00, 0x00, 0x0E, 0xB7, 0xA1, 0xB4, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7A, 0x37, 0x00, 0x00, 0x7A, 0x37, 0x00, 0x00, 0x09, 0xA9, 0x6E, 0x42, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x3C, 0x00, 0x00, 0xA8, 0x3C, 0x00, 0x00, 0xD1, 0x88, 0xE7, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x51, 0x00, 0x00, 0xCC, 0x51, 0x00, 0x00, 0xBA, 0xE1, 0xB6, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x2B, 0x00, 0x00, 0x3E, 0x2B, 0x00, 0x00, 0x31, 0x6D, 0x48, 0x53, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x28, 0x00, 0x00, 0x62, 0x28, 0x00, 0x00, 0xA3, 0x47, 0x62, 0x4B, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x65, 0x00, 0x00, 0x10, 0x65, 0x00, 0x00, 0x5A, 0x9B, 0x17, 0xEC, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x00, 0x00, 0x54, 0x45, 0x00, 0x00, 0x96, 0xDD, 0xB5, 0xA6, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8A, 0x4E, 0x00, 0x00, 0x8A, 0x4E, 0x00, 0x00, 0x0D, 0x84, 0x0B, 0xB2, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x81, 0x00, 0x00, 0xEA, 0x81, 0x00, 0x00, 0x20, 0xB5, 0xB2, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x20, 0x00, 0x00, 0x94, 0x20, 0x00, 0x00, 0x00, 0x29, 0x67, 0xD1, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x44, 0x00, 0x00, 0x2E, 0x44, 0x00, 0x00, 0x68, 0xFF, 0xF1, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF2, 0x48, 0x01, 0x00, 0xF2, 0x48, 0x01, 0x00, 0xD3, 0x6B, 0xE8, 0x72, 0x00, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x5A, 0x00, 0x00, 0xFF, 0x5A, 0x00, 0x00, 0x58, 0x3D, 0x56, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x51, 0x00, 0x00, 0xF0, 0x51, 0x00, 0x00, 0x58, 0xFE, 0xAD, 0x09, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x52, 0x00, 0x00, 0xD4, 0x52, 0x00, 0x00, 0x24, 0xC6, 0x95, 0x6A, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x9B, 0x00, 0x00, 0xD6, 0x9B, 0x00, 0x00, 0x93, 0xAC, 0x5F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x3A, 0x01, 0x00, 0x2E, 0x3A, 0x01, 0x00, 0x0D, 0xB5, 0x68, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x27, 0x00, 0x00, 0x6C, 0x27, 0x00, 0x00, 0x54, 0xEA, 0xFB, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x49, 0x00, 0x00, 0x62, 0x49, 0x00, 0x00, 0xA7, 0xFB, 0xBA, 0x61, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0xC1, 0x00, 0x00, 0x74, 0xC1, 0x00, 0x00, 0x5F, 0x3B, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x2D, 0x00, 0x00, 0x12, 0x2D, 0x00, 0x00, 0xB5, 0xAB, 0x6F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x15, 0x00, 0x00, 0x12, 0x15, 0x00, 0x00, 0x87, 0xBD, 0xB7, 0x63, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x14, 0x01, 0x00, 0xF0, 0x14, 0x01, 0x00, 0xD9, 0x05, 0xF4, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x5B, 0x00, 0x00, 0x44, 0x5B, 0x00, 0x00, 0x21, 0xC5, 0x55, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA2, 0x54, 0x00, 0x00, 0xA2, 0x54, 0x00, 0x00, 0x30, 0x16, 0x48, 0xAC, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x29, 0x00, 0x00, 0x8E, 0x29, 0x00, 0x00, 0x0B, 0xCF, 0x61, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x3C, 0x01, 0x00, 0xFE, 0x3C, 0x01, 0x00, 0x0A, 0xC2, 0x89, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xDB, 0x00, 0x00, 0x4E, 0xDB, 0x00, 0x00, 0xAF, 0xE1, 0xD5, 0x64, 0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x69, 0x00, 0x00, 0xF3, 0x69, 0x00, 0x00, 0x8F, 0x77, 0x59, 0x98, 0x00, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x3A, 0x00, 0x00, 0x4A, 0x3A, 0x00, 0x00, 0xA4, 0xF2, 0x65, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x2C, 0x01, 0x00, 0x48, 0x2C, 0x01, 0x00, 0x0D, 0x7D, 0x9D, 0xAC, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x77, 0x00, 0x00, 0xA6, 0x77, 0x00, 0x00, 0x5B, 0xE1, 0x56, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE6, 0x73, 0x00, 0x00, 0xE6, 0x73, 0x00, 0x00, 0xC5, 0x3F, 0xEA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x43, 0x01, 0x00, 0x10, 0x43, 0x01, 0x00, 0xDC, 0xB4, 0xDA, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x51, 0x00, 0x00, 0x42, 0x51, 0x00, 0x00, 0x08, 0x25, 0x33, 0xC9, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6A, 0x2C, 0x00, 0x00, 0x6A, 0x2C, 0x00, 0x00, 0xCC, 0x21, 0xF4, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x3D, 0x00, 0x00, 0x44, 0x3D, 0x00, 0x00, 0x79, 0x33, 0x1C, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9A, 0xAF, 0x01, 0x00, 0x9A, 0xAF, 0x01, 0x00, 0xB0, 0x12, 0xE3, 0xD9, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0x38, 0x00, 0x00, 0xE2, 0x38, 0x00, 0x00, 0x9D, 0x63, 0x16, 0x24, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xC8, 0x00, 0x00, 0xE8, 0xC8, 0x00, 0x00, 0x4F, 0xD5, 0xF7, 0x6A, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x97, 0x00, 0x00, 0x0E, 0x97, 0x00, 0x00, 0x94, 0x94, 0x94, 0xC9, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x60, 0x00, 0x00, 0x12, 0x60, 0x00, 0x00, 0x96, 0x23, 0x6E, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA, 0x60, 0x00, 0x00, 0xBA, 0x60, 0x00, 0x00, 0x91, 0xC4, 0xDB, 0x69, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3D, 0x00, 0x00, 0x38, 0x3D, 0x00, 0x00, 0x7D, 0xE1, 0xBB, 0x42, 0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x46, 0x00, 0x00, 0xF8, 0x46, 0x00, 0x00, 0xBB, 0x33, 0x8A, 0x38, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x41, 0x00, 0x00, 0x0A, 0x41, 0x00, 0x00, 0xF9, 0xA7, 0x7D, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x38, 0x00, 0x00, 0x28, 0x38, 0x00, 0x00, 0xA9, 0x18, 0xDE, 0x01, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x4E, 0x00, 0x00, 0x66, 0x4E, 0x00, 0x00, 0x8D, 0xE2, 0xB5, 0x13, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x0B, 0x02, 0x00, 0x38, 0x0B, 0x02, 0x00, 0x91, 0xC3, 0xFB, 0x85, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x2C, 0x00, 0x00, 0x58, 0x2C, 0x00, 0x00, 0xA0, 0x17, 0x5B, 0x0C };
            using (MemoryStream ms = new MemoryStream(data))
            using (BinaryReader br = new BinaryReader(ms))
            {
                W2AnimFile = new CR2WFile(br);
                createAnimationSet();
                for (int i = 0; i < files.Count(); i++)
                {
                    string filename = files[i];
                    createAnimation(importJsonAnim(filename), i, savefileName);
                }
                saveToFile(savefileName);
            }
        }

        private float HalfFloat(float x)// testing precision
        {
            float single_24;
            float single_16;
            byte[] bA3 = BitConverter.GetBytes(x);

            var pad = 0;
            var b1 = (uint)bA3[1];
            var b2 = (uint)bA3[2];
            var b3 = (uint)bA3[3];
            var bits_24 = ((uint)b3 << 24) | ((uint)b2 << 16) | ((uint)b1 << 8) | ((uint)pad);
            var bits_16 = ((uint)b3 << 24) | ((uint)b2 << 16) | ((uint)pad) | ((uint)pad);
            single_24 = BitConverter.ToSingle(BitConverter.GetBytes(bits_24), 0);
            single_16 = BitConverter.ToSingle(BitConverter.GetBytes(bits_16), 0);
            byte[] bAsingle_24 = BitConverter.GetBytes(single_24);
            byte[] bAsingle_16 = BitConverter.GetBytes(single_16);
            return single_24;
        }



        private byte[] getBuffer(CR2WExportWrapper lastAnimBuffer, CAnimationBufferBitwiseCompressed animBuffer, string dataAddrType)
        {

            List<Bone> bonelist = animBuffer.bones;
            Dictionary<string, uint> dataAddrDict = new Dictionary<string, uint>();
            //dataAddrDict.Clear();
            byte[] bufferData = new byte[0];
            int ibx = 0;
            foreach (CVector bone in (lastAnimBuffer.GetVariableByName("bones") as CArray).array)
            {
                CUInt32 dataAddrPos = (bone.GetVariableByName("position") as CVector).GetVariableByName(dataAddrType) as CUInt32;
                CUInt32 dataAddrRot = (bone.GetVariableByName("orientation") as CVector).GetVariableByName(dataAddrType) as CUInt32;
                CUInt32 dataAddrScale = (bone.GetVariableByName("scale") as CVector).GetVariableByName(dataAddrType) as CUInt32;


                ///>>>>>>>>>>>>>>> POSITION
                //TODO position compression levels? Seems to just involve shaving off float bytes to 24-bit or 16-bit and accepting the precision loss
                byte[] posData = new byte[0];
                if (bonelist[ibx].positionFrames.Count == 1)
                {
                    (bone.GetVariableByName("position") as CVector).GetVariableByName("compression").SetValue((sbyte)2);
                    Vector pos = bonelist[ibx].positionFrames[0];
                    byte[] bA1 = BitConverter.GetBytes(HalfFloat(pos.x));
                    byte[] bA2 = BitConverter.GetBytes(HalfFloat(pos.y));
                    byte[] bA3 = BitConverter.GetBytes(HalfFloat(pos.z));
                    posData = Combine(posData, new byte[] { bA1[2], bA1[3] });
                    posData = Combine(posData, new byte[] { bA2[2], bA2[3] });
                    posData = Combine(posData, new byte[] { bA3[2], bA3[3] });
                } else {
                    (bone.GetVariableByName("position") as CVector).GetVariableByName("compression").SetValue((sbyte)1);
                    for (int i = 0; i < bonelist[ibx].positionFrames.Count; i++)
                    {
                        Vector pos = bonelist[ibx].positionFrames[i];
                        byte[] bA1 = BitConverter.GetBytes(HalfFloat(pos.x));
                        byte[] bA2 = BitConverter.GetBytes(HalfFloat(pos.y));
                        byte[] bA3 = BitConverter.GetBytes(HalfFloat(pos.z));
                        posData = Combine(posData, new byte[] { bA1[1], bA1[2], bA1[3] });
                        posData = Combine(posData, new byte[] { bA2[1], bA2[2], bA2[3] });
                        posData = Combine(posData, new byte[] { bA3[1], bA3[2], bA3[3] });
                        if (dataAddrType == "dataAddrFallback")
                            break;
                    }
                }
                string posKey = string.Join(":", posData);
                if (!dataAddrDict.ContainsKey(posKey))
                {
                    //set the address to use for all
                    dataAddrDict.Add(posKey, (uint)bufferData.Length);
                    if (dataAddrPos != null)
                        dataAddrPos.SetValue(dataAddrDict[posKey]);
                    bufferData = Combine(bufferData, posData);

                }
                else
                {
                    //get the address
                    if (dataAddrPos != null)
                        dataAddrPos.SetValue(dataAddrDict[posKey]);
                }

                ///>>>>>>>>>>>>>>> ROTATION
                byte[] rotData = new byte[0];
                for (int i = 0; i < bonelist[ibx].rotationFrames.Count; i++)
                {
                    Quaternion rot = bonelist[ibx].rotationFrames[i];
                    ulong compress = getBits(getShort(rot.X), getShort(rot.Y), getShort(rot.Z), getShort(-rot.W));
                    byte[] bA = BitConverter.GetBytes(compress);
                    byte[] bA2 = new byte[] { bA[5], bA[4], bA[3], bA[2], bA[1], bA[0] };
                    rotData = Combine(rotData, bA2);
                    if (dataAddrType == "dataAddrFallback")
                        break;
                }
                string rotKey = string.Join(":", rotData);
                if (!dataAddrDict.ContainsKey(rotKey))
                {
                    //set the address to use for all
                    dataAddrDict.Add(rotKey, (uint)bufferData.Length);
                    if (dataAddrRot != null)
                        dataAddrRot.SetValue(dataAddrDict[rotKey]);
                    bufferData = Combine(bufferData, rotData);
                }
                else
                {
                    //get the address
                    if (dataAddrRot != null)
                        dataAddrRot.SetValue(dataAddrDict[rotKey]);
                }

                ///SCALE
                byte[] scaleData = new byte[0];
                for (int i = 0; i < bonelist[ibx].scaleFrames.Count; i++)
                {
                    //80 3F 80 3F 80
                    Vector scl = bonelist[ibx].scaleFrames[i];
                    byte[] bA1 = BitConverter.GetBytes(scl.x);
                    byte[] bA2 = BitConverter.GetBytes(scl.y);
                    byte[] bA3 = BitConverter.GetBytes(scl.z);
                    scaleData = Combine(scaleData, new byte[] { bA1[2], bA1[3] });
                    scaleData = Combine(scaleData, new byte[] { bA2[2], bA2[3] });
                    scaleData = Combine(scaleData, new byte[] { bA3[2], bA3[3] });

                    (bone.GetVariableByName("scale") as CVector).GetVariableByName("compression").SetValue((sbyte)2);
                    if (dataAddrType == "dataAddrFallback")
                        break;
                }

                string scaleKey = string.Join(":", scaleData);
                if (!dataAddrDict.ContainsKey(scaleKey))
                {
                    //set the address to use for all
                    dataAddrDict.Add(scaleKey, (uint)bufferData.Length);
                    if (dataAddrScale != null)
                        dataAddrScale.SetValue(dataAddrDict[scaleKey]);
                    bufferData = Combine(bufferData, scaleData);
                }
                else
                {
                    //get the address
                    if (dataAddrScale != null)
                        dataAddrScale.SetValue(dataAddrDict[scaleKey]);
                }

                ibx++;
            }

            //TRACKS MUST HAVE THE FULL 144 track names, currently they don't
            List<Track> tracksList = animBuffer.tracks;
            if (tracksList !=null && tracksList.Count() > 7)
            {

            }
            CArray tracksArray = lastAnimBuffer.GetVariableByName("tracks") as CArray;
            int iby = 0;
            if (tracksArray != null)
                foreach (CVector track in tracksArray.array)
                {
                    Track importTrack = tracksList[iby];
                    CUInt32 dataAddr = track.GetVariableByName(dataAddrType) as CUInt32;
                    byte[] CompressedData = new byte[0];
                    if (importTrack.trackFrames.Count == 1)
                    {
                        track.GetVariableByName("compression").SetValue((sbyte)2);
                        float trackValue = importTrack.trackFrames[0];
                        byte[] bA1 = BitConverter.GetBytes(HalfFloat(trackValue));
                        CompressedData = Combine(CompressedData, new byte[] { bA1[2], bA1[3] });
                    }
                    else
                    {
                        track.GetVariableByName("compression").SetValue((sbyte)1);
                        for (int i = 0; i < importTrack.trackFrames.Count; i++)
                        {
                            float trackValue = importTrack.trackFrames[i];
                            byte[] bA1 = BitConverter.GetBytes(HalfFloat(trackValue));
                            CompressedData = Combine(CompressedData, new byte[] { bA1[1], bA1[2], bA1[3] });
                            if (dataAddrType == "dataAddrFallback")
                                break;
                        }
                    }
                    string posKey = string.Join(":", CompressedData);
                    if (!dataAddrDict.ContainsKey(posKey))
                    {
                        //set the address to use for all
                        dataAddrDict.Add(posKey, (uint)bufferData.Length);
                        if (dataAddr != null)
                            dataAddr.SetValue(dataAddrDict[posKey]);
                        bufferData = Combine(bufferData, CompressedData);

                    }
                    else
                    {
                        //get the address
                        if (dataAddr != null)
                            dataAddr.SetValue(dataAddrDict[posKey]);
                    }
                    iby++;
                }


            return bufferData;
        }

        private static ushort getShort(float v)
        {
            float quart = (v * -2048.0f) + 2047.0f;
            return (ushort)quart;
        }
        private static ulong getBits(ushort a, ushort b, ushort c, ushort d)
        {
            return (ulong)a << 36 | (ulong)b << 24 | (ulong)c << 12 | (ulong)d;
        }

        public void saveToFile(string FileName)
        {
            try
            {
                using (var mem = new MemoryStream())
                {
                    using (var writer = new BinaryWriter(mem))
                    {
                        W2AnimFile.Write(writer);
                        W2AnimFile.Write(writer);//need to run Write twice or there are issues with CNames?
                        mem.Seek(0, SeekOrigin.Begin);

                        using (var fs = new FileStream(FileName, FileMode.Create, FileAccess.Write))
                        {
                            mem.WriteTo(fs);
                            fs.Close();
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Failed to save the file(s)! They are probably in use.\n" + e.ToString());
            }
        }

        private void saveToFileBuffer(byte[] ba, string FileName)
        {
            try
            {
                using (var mem = new MemoryStream())
                {
                    using (var writer = new BinaryWriter(mem))
                    {
                        writer.Write(ba);
                        mem.Seek(0, SeekOrigin.Begin);
                        using (var fs = new FileStream(FileName, FileMode.Create, FileAccess.Write))
                        {
                            mem.WriteTo(fs);
                            fs.Close();
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Failed to save the file(s)! They are probably in use.\n" + e.ToString());
            }
        }
    }
    public class Vector
    {
        public float x;
        public float y;
        public float z;
        public Vector(float X, float Y, float Z)
        {
            x = X;
            y = Y;
            z = Z;
        }
    }

    //public class ReadAnims
    //{
    //    animBuffer
    //    public List<Bone> bones = new List<Bone>();
    //    public float dt;
    //    public float duration;
    //    public string name;
    //    public uint numFrames;
    //};

}